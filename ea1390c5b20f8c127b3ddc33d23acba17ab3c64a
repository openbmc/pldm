{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d0577551_f31bcc7a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-05-06T03:58:57Z",
      "side": 1,
      "message": "@patrick - do you have any more comments on this one ?",
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a43f47a7_cb933dca",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 181,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-06T14:05:53Z",
      "side": 1,
      "message": "This is, frankly, still a poor decision.  Why do we need 3 different files to express these just because they\u0027re 3 different attribute types?  You could have just as easily done:\n\n```\n{  \"integers\" : [ ... ],\n   ...\n}\n```\n\nor\n\n```\n[ { \"type\": \"integer\" ... } ]\n```",
      "range": {
        "startLine": 179,
        "startChar": 40,
        "endLine": 181,
        "endChar": 37
      },
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fcbd4bf_ae91fc56",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 181,
      "author": {
        "id": 1001384
      },
      "writtenOn": "2024-05-15T11:35:05Z",
      "side": 1,
      "message": "In the systems like IBM there are nearly 150 BIOS attributes, creating separate files make them easy to maintain. Why do you think this is a poor decision? What advantage do we gain out of making them a single file?",
      "parentUuid": "a43f47a7_cb933dca",
      "range": {
        "startLine": 179,
        "startChar": 40,
        "endLine": 181,
        "endChar": 37
      },
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a29173db_9cff73e6",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 181,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-15T19:16:43Z",
      "side": 1,
      "message": "Are we really going to discuss the merits of a per attribute-type file?  It was a lazy / sloppy choice.\n\n\u003e In the systems like IBM there are nearly 150 BIOS attributes, creating separate files make them easy to maintain.\n\nIf maintaining 1 file with 150 entries is difficult, maintaining 3 files with 50 entries is not \"easy\".  In fact, it is clearly *harder* to maintain because you now can\u0027t even organize these attributes based on usage patterns.  For example, you probably have 15+ attributes related to DIMM settings; these are now spread across 3 different files in random places in the files, rather than all of them in close proximity to each other.\n\nWhy not only allow only 1 attribute per file then?",
      "parentUuid": "8fcbd4bf_ae91fc56",
      "range": {
        "startLine": 179,
        "startChar": 40,
        "endLine": 181,
        "endChar": 37
      },
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c2f1f94_99104bf1",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 184,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-06T14:05:53Z",
      "side": 1,
      "message": "How do you express multiple?  Is it expected to a JSON array?",
      "range": {
        "startLine": 183,
        "startChar": 0,
        "endLine": 184,
        "endChar": 58
      },
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30656267_7829079d",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 184,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-06T14:05:53Z",
      "side": 1,
      "message": "Table 6, 7, and 9 aren\u0027t even JSON though....",
      "range": {
        "startLine": 183,
        "startChar": 60,
        "endLine": 184,
        "endChar": 58
      },
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22e4e852_f89d7a19",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 184,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-06T14:05:53Z",
      "side": 1,
      "message": "nit: suggest making this a link [PLDM BIOS Specification] rather than a file-name.",
      "range": {
        "startLine": 184,
        "startChar": 14,
        "endLine": 184,
        "endChar": 31
      },
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f5dddb73_cc6390d7",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 184,
      "author": {
        "id": 1001384
      },
      "writtenOn": "2024-05-15T11:35:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22e4e852_f89d7a19",
      "range": {
        "startLine": 184,
        "startChar": 14,
        "endLine": 184,
        "endChar": 31
      },
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b828d8bf_5f22ae8b",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 184,
      "author": {
        "id": 1001384
      },
      "writtenOn": "2024-05-15T11:35:05Z",
      "side": 1,
      "message": "Tables prvides in PLDM BIOS specifacations provides attribute fields based on the attribute type(String/integer/enum). We needed some way to feed the BIOS attributes data to OpenBmc Systems, json config files were added to provide BIOS attributes.",
      "parentUuid": "30656267_7829079d",
      "range": {
        "startLine": 183,
        "startChar": 60,
        "endLine": 184,
        "endChar": 58
      },
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6547f90c_f6c39ed6",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 184,
      "author": {
        "id": 1001384
      },
      "writtenOn": "2024-05-15T11:35:05Z",
      "side": 1,
      "message": "Yes, JSON array is used to provide multiple attributes. I have updated the same in the document.",
      "parentUuid": "3c2f1f94_99104bf1",
      "range": {
        "startLine": 183,
        "startChar": 0,
        "endLine": 184,
        "endChar": 58
      },
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ec020ef_2b8d0585",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 184,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-15T19:16:43Z",
      "side": 1,
      "message": "My point was I have no idea how to connect that sentence (\"more info is documented\") with the information that immediately follows (after the \":\").",
      "parentUuid": "b828d8bf_5f22ae8b",
      "range": {
        "startLine": 183,
        "startChar": 60,
        "endLine": 184,
        "endChar": 58
      },
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05a51685_b29415e6",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 187,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-06T14:05:53Z",
      "side": 1,
      "message": "nit: This isn\u0027t valid JSON because you\u0027ve added these fields.  It probably would be better to either do these sub-headings outside of the escapes or as json5-style comments (which might require changing ```json to ```json5.",
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b767437_d329a48e",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 187,
      "author": {
        "id": 1001384
      },
      "writtenOn": "2024-05-15T11:35:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "05a51685_b29415e6",
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1964a922_be7afe1d",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 194,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-06T14:05:53Z",
      "side": 1,
      "message": "Why are we mixing camelCase and snake_case?",
      "range": {
        "startLine": 194,
        "startChar": 5,
        "endLine": 194,
        "endChar": 13
      },
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19ba0111_eaacb7e3",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 194,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-06T14:05:53Z",
      "side": 1,
      "message": "Why do we need \"help text\"?  Who is the consumer of this?",
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25f1575f_7172b1ad",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 194,
      "author": {
        "id": 1001384
      },
      "writtenOn": "2024-05-15T11:35:05Z",
      "side": 1,
      "message": "ACK, we can make all of them in same case. This involves PLDM code changes, so can be taken as separate commit.",
      "parentUuid": "1964a922_be7afe1d",
      "range": {
        "startLine": 194,
        "startChar": 5,
        "endLine": 194,
        "endChar": 13
      },
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b12dad49_1e2f89d7",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 194,
      "author": {
        "id": 1001384
      },
      "writtenOn": "2024-05-15T11:35:05Z",
      "side": 1,
      "message": "The BMC GUI displays the BIOS Attribute Registry to the users. The Attribute details are populated based on redfish schema https://redfish.dmtf.org/schemas/v1/AttributeRegistry.v1_3_8.json.",
      "parentUuid": "19ba0111_eaacb7e3",
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb39a3b4_4494e8e0",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 194,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-15T19:16:43Z",
      "side": 1,
      "message": "Can you please document this part then?  How do we generate an AttributeRegistry from PLDM and share that with bmcweb?  I don\u0027t see any evidence that this actually happens.  Is this something you have in downstream commits?\n\nHow do you combine 3 different attribute files into a single AttributeRegistry?  What is the identifier for the AttributeRegistry?  How do we version it?\n\nHow do you handle a multi-host or heterogeneous configuration?  You can have a blade server with two different processor architectures.  There has to be something related to the exact attribute collection that ends up turning into AttributeRegistry identifiers so that external tooling can disambiguate.\n\nYour reference here to AtttributeRegistry makes me think even more is not documented...",
      "parentUuid": "b12dad49_1e2f89d7",
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91d697e4_54454cbe",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 195,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-06T14:05:53Z",
      "side": 1,
      "message": "Display where?",
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac59b8b6_d0eddbf6",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 195,
      "author": {
        "id": 1001384
      },
      "writtenOn": "2024-05-15T11:35:05Z",
      "side": 1,
      "message": "The BMC GUI displays the BIOS Attribute Registry to the users. Redfish schema https://redfish.dmtf.org/schemas/v1/AttributeRegistry.v1_3_8.json talks about DisplayName - \"The user-readable display string for the attribute in the defined language.\"",
      "parentUuid": "91d697e4_54454cbe",
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e44435cf_2c91991b",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 195,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-15T19:16:43Z",
      "side": 1,
      "message": "If these attributes are somehow related to the Redfish AttributeRegistry, let\u0027s be very clear about that (by changing the key name).  It seems like these attributes are likely specific to Redfish, so let\u0027s use Redfish in the name?  I assume these turn into some specific property in the AttributeRegistry entries, so ideally we use that same name.\n\nMaybe something like this?\n\n```\n{\n   ...\n   \"redfish\" : { \"display_name\": ..., \"help_text\": ... },\n   ...\n}\n```",
      "parentUuid": "ac59b8b6_d0eddbf6",
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ab229e7_01bc9dde",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 210,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-06T14:05:53Z",
      "side": 1,
      "message": "What use do we have for this?  Can\u0027t we make them all ASCII or UTF-8?\n\nShouldn\u0027t we specify _exactly_ what we support?  There is no way for us to support a \"Vendor Specific\" string type, for example.",
      "range": {
        "startLine": 210,
        "startChar": 0,
        "endLine": 210,
        "endChar": 103
      },
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcc6c441_75e03a0a",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 210,
      "author": {
        "id": 1001384
      },
      "writtenOn": "2024-05-15T11:35:05Z",
      "side": 1,
      "message": "The PLDM BIOS Specification(https://www.dmtf.org/sites/default/files/standards/documents/DSP0247_1.0.0.pdf) Table7, provides BIOS Attribute table fields for String attribute.\nIt says\n```\nStringType\nThe type of the string. It identifies the character encoding used for this string.\nPossible values:\n{Unknown\u003d0x00, ASCII\u003d0x01, Hex\u003d0x02, UTF-8\u003d0x03, UTF-16LE\u003d0x04, UTF-16BE\u003d0x05,\nVendor Specific\u003d0xFF} ```\nWe can set String_type to ASCII for all the string attributes.",
      "parentUuid": "5ab229e7_01bc9dde",
      "range": {
        "startLine": 210,
        "startChar": 0,
        "endLine": 210,
        "endChar": 103
      },
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b5c6990_68e3cb4c",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 210,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-15T19:16:43Z",
      "side": 1,
      "message": "Do we actually need to support all of these though?  I don\u0027t really care what the specification says; I care about what we\u0027re actually implementing.\n\nYou still haven\u0027t answered what the expected value of the data is after \"string_type\"...",
      "parentUuid": "bcc6c441_75e03a0a",
      "range": {
        "startLine": 210,
        "startChar": 0,
        "endLine": 210,
        "endChar": 103
      },
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f52bc21_0832a7b1",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 213,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-06T14:05:53Z",
      "side": 1,
      "message": "You can\u0027t do `string.length()` in code?  You need a human to tell you this?",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 213,
        "endChar": 73
      },
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "031717e8_54905cb1",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 213,
      "author": {
        "id": 1001384
      },
      "writtenOn": "2024-05-15T11:35:05Z",
      "side": 1,
      "message": "The PLDM BIOS Specification(https://www.dmtf.org/sites/default/files/standards/documents/DSP0247_1.0.0.pdf) Table7, provides BIOS Attribute table fields for String attribute.\n```DefaultStringLength:  The length of the default string in bytes. A value of 0 indicates that this attribute has no default\nstring.```\nTo handle the possibility of not having the default string value, default string length is used.",
      "parentUuid": "0f52bc21_0832a7b1",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 213,
        "endChar": 73
      },
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "baa436e0_31ad618e",
        "filename": "README.md",
        "patchSetId": 9
      },
      "lineNbr": 213,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-05-15T19:16:43Z",
      "side": 1,
      "message": "How do you have a default string length without a default string value?  I have no idea what you mean by this.\n\nFrom the spec:\n\n\u003e The length of the default string in bytes. A value of 0 indicates that this attribute has no default string.\n\nSince the spec doesn\u0027t use null-terminated strings, this is literally the \"string length\" of the string payload in the protocol.  I see no reason why this would be in JSON.",
      "parentUuid": "031717e8_54905cb1",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 213,
        "endChar": 73
      },
      "revId": "ea1390c5b20f8c127b3ddc33d23acba17ab3c64a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}