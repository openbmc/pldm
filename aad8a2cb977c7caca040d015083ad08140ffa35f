{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "92531bd4_20c0025f",
        "filename": "common/instance_id.hpp",
        "patchSetId": 27
      },
      "lineNbr": 8,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-06-04T04:08:38Z",
      "side": 1,
      "message": "need to also include\n\n#include \u003csystem_error\u003e  \n#include \u003ccerrno\u003e\n\n?",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 8,
        "endChar": 19
      },
      "revId": "aad8a2cb977c7caca040d015083ad08140ffa35f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73a0fec1_f21c1f3b",
        "filename": "fw-update/device_updater.cpp",
        "patchSetId": 27
      },
      "lineNbr": 20,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2025-06-21T07:42:51Z",
      "side": 1,
      "message": "These are changing in DeviceUpdater APIs return.\nCan you separate these changing to different commit/",
      "revId": "aad8a2cb977c7caca040d015083ad08140ffa35f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab21c9bf_0637d326",
        "filename": "fw-update/device_updater.cpp",
        "patchSetId": 27
      },
      "lineNbr": 31,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-06-04T04:08:38Z",
      "side": 1,
      "message": "I think these patterns can be eliminated by using a function template, which can spit out a log, return an error back to the caller or returns the value.",
      "range": {
        "startLine": 22,
        "startChar": 1,
        "endLine": 31,
        "endChar": 47
      },
      "revId": "aad8a2cb977c7caca040d015083ad08140ffa35f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "592e381d_4daee1a3",
        "filename": "fw-update/device_updater.cpp",
        "patchSetId": 27
      },
      "lineNbr": 31,
      "author": {
        "id": 1002134
      },
      "writtenOn": "2025-06-13T11:20:58Z",
      "side": 1,
      "message": "Could you kindly specify the format of the function template you are looking for? \nAdditionally, could you let me know if we need to handle cases involving throw, return void, and return int?\nThank you very much.",
      "parentUuid": "ab21c9bf_0637d326",
      "range": {
        "startLine": 22,
        "startChar": 1,
        "endLine": 31,
        "endChar": 47
      },
      "revId": "aad8a2cb977c7caca040d015083ad08140ffa35f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2e8102a_dbaf8255",
        "filename": "fw-update/device_updater.cpp",
        "patchSetId": 27
      },
      "lineNbr": 31,
      "author": {
        "id": 1002134
      },
      "writtenOn": "2025-06-16T06:07:30Z",
      "side": 1,
      "message": "If possible, I would appreciate clear guidance and examples to help me resolve the issue of avoiding core dumps when the pldmd instance ID is exhausted.\nThank you very much!",
      "parentUuid": "592e381d_4daee1a3",
      "range": {
        "startLine": 22,
        "startChar": 1,
        "endLine": 31,
        "endChar": 47
      },
      "revId": "aad8a2cb977c7caca040d015083ad08140ffa35f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59229a41_91165033",
        "filename": "fw-update/device_updater.cpp",
        "patchSetId": 27
      },
      "lineNbr": 31,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-06-25T10:24:28Z",
      "side": 1,
      "message": "what i meant was , something along these lines : \n\n```\ntemplate \u003ctypename T\u003e\nstd::expected\u003cT, int\u003e GetInstanceID(const std::expected\u003cT, InstanceIdError\u003e\u0026 result)\n{\n    if (!result)\n    {\n        const auto\u0026 err \u003d result.error();\n        std::cerr \u003c\u003c \"Failed to allocate instance ID: rc\u003d\"\n                  \u003c\u003c err.rc() \u003c\u003c \", msg\u003d\" \u003c\u003c err.msg() \u003c\u003c \u0027\\n\u0027;\n        return std::unexpected(err.rc());\n    }\n    return result.value();\n}\n\n```\n\nand it could be used like this ? \n\n```\nauto instanceIdResult \u003d GetInstanceID(updateManager-\u003einstanceIdDb.next(eid));\nif (!instanceIdResult)\n    return instanceIdResult.error();\n```\n\ndoes it make sense ? (this sort of thing will reduce the repeated pattern all over the patch)",
      "parentUuid": "b2e8102a_dbaf8255",
      "range": {
        "startLine": 22,
        "startChar": 1,
        "endLine": 31,
        "endChar": 47
      },
      "revId": "aad8a2cb977c7caca040d015083ad08140ffa35f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94614f62_e647f2f7",
        "filename": "softoff/softoff.cpp",
        "patchSetId": 27
      },
      "lineNbr": 291,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2025-06-21T07:42:51Z",
      "side": 1,
      "message": "Output message meets Anti-pattern in lg2: https://github.com/openbmc/docs/blob/master/anti-patterns.md#ill-defined-data-structuring-in-lg2-message-strings\nCheck the others output message also.",
      "revId": "aad8a2cb977c7caca040d015083ad08140ffa35f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}