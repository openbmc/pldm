{
  "comments": [
    {
      "key": {
        "uuid": "b4804bda_a488bfd2",
        "filename": "host-bmc/dbus_to_event_handler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 59,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-06-22T02:32:38Z",
      "side": 1,
      "message": "\"if(rc || completionCode)\" would be less characters.\n\nmight apply for other portions of this patch.",
      "range": {
        "startLine": 59,
        "startChar": 8,
        "endLine": 59,
        "endChar": 65
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af78d2d0_f2df4a1c",
        "filename": "host-bmc/dbus_to_event_handler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 59,
      "author": {
        "id": 1000181
      },
      "writtenOn": "2021-06-26T12:16:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b4804bda_a488bfd2",
      "range": {
        "startLine": 59,
        "startChar": 8,
        "endLine": 59,
        "endChar": 65
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96aa33f1_a2f62e59",
        "filename": "host-bmc/dbus_to_event_handler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 71,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-06-22T02:32:38Z",
      "side": 1,
      "message": "if (rc)\n\nmight apply for other portions of this patch.",
      "range": {
        "startLine": 71,
        "startChar": 8,
        "endLine": 71,
        "endChar": 26
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cea12002_d4de0d70",
        "filename": "host-bmc/dbus_to_event_handler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 71,
      "author": {
        "id": 1000181
      },
      "writtenOn": "2021-06-26T12:16:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "96aa33f1_a2f62e59",
      "range": {
        "startLine": 71,
        "startChar": 8,
        "endLine": 71,
        "endChar": 26
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ba0592c_5b56bf2d",
        "filename": "host-bmc/dbus_to_host_effecters.cpp",
        "patchSetId": 7
      },
      "lineNbr": 302,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-06-22T02:32:38Z",
      "side": 1,
      "message": "It will be good to evaluate the InternalFailure thrown here, in general we have limited the use of InternalFailure.",
      "range": {
        "startLine": 301,
        "startChar": 0,
        "endLine": 302,
        "endChar": 68
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "444b1821_ee413611",
        "filename": "host-bmc/dbus_to_host_effecters.cpp",
        "patchSetId": 7
      },
      "lineNbr": 302,
      "author": {
        "id": 1000181
      },
      "writtenOn": "2021-06-26T12:16:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1ba0592c_5b56bf2d",
      "range": {
        "startLine": 301,
        "startChar": 0,
        "endLine": 302,
        "endChar": 68
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f49238e_a7e3c32b",
        "filename": "host-bmc/dbus_to_host_effecters.cpp",
        "patchSetId": 7
      },
      "lineNbr": 303,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-06-22T02:32:38Z",
      "side": 1,
      "message": "My preference will be separate conditions for a decode failure and error completion code. The trace statement looks messed up :-)",
      "range": {
        "startLine": 294,
        "startChar": 0,
        "endLine": 303,
        "endChar": 13
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5cbc797_e28f65c3",
        "filename": "host-bmc/dbus_to_host_effecters.cpp",
        "patchSetId": 7
      },
      "lineNbr": 303,
      "author": {
        "id": 1000181
      },
      "writtenOn": "2021-06-26T12:16:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5f49238e_a7e3c32b",
      "range": {
        "startLine": 294,
        "startChar": 0,
        "endLine": 303,
        "endChar": 13
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "320434a5_d5a170d0",
        "filename": "host-bmc/dbus_to_host_effecters.hpp",
        "patchSetId": 7
      },
      "lineNbr": 85,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-06-22T02:32:38Z",
      "side": 1,
      "message": "Do we want this to be consistent? DbusToPLDMEvent is passing a reference.",
      "range": {
        "startLine": 85,
        "startChar": 8,
        "endLine": 85,
        "endChar": 59
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a13f2d49_c3a545c5",
        "filename": "host-bmc/dbus_to_host_effecters.hpp",
        "patchSetId": 7
      },
      "lineNbr": 85,
      "author": {
        "id": 1000181
      },
      "writtenOn": "2021-06-26T12:16:53Z",
      "side": 1,
      "message": "yeah i had to change that to make the testcase passed. changing all to reference",
      "parentUuid": "320434a5_d5a170d0",
      "range": {
        "startLine": 85,
        "startChar": 8,
        "endLine": 85,
        "endChar": 59
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39b59e5b_39dafaa4",
        "filename": "host-bmc/dbus_to_host_effecters.hpp",
        "patchSetId": 7
      },
      "lineNbr": 85,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-06-29T05:57:40Z",
      "side": 1,
      "message": "I think you have changed all to pointer instead of changing all to reference. I think it is mixed up already in code for passing global objects, example Requester* and Requester\u0026.",
      "parentUuid": "a13f2d49_c3a545c5",
      "range": {
        "startLine": 85,
        "startChar": 8,
        "endLine": 85,
        "endChar": 59
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e88ad1e4_43b3d34b",
        "filename": "host-bmc/dbus_to_host_effecters.hpp",
        "patchSetId": 7
      },
      "lineNbr": 85,
      "author": {
        "id": 1000181
      },
      "writtenOn": "2021-06-30T09:46:07Z",
      "side": 1,
      "message": "yeah i have changed all to pointers to keep parity among the functions as you suggested.\ncan not pass the reference because in few cases like \"pldm::host_effecters::HostEffecterParser\"  we have testcases written and passing a null reference fails the testcase\nthe same is being followed for \"dbusImplReq\" as well. in general that is a reference but in few cases it is a pointer",
      "parentUuid": "39b59e5b_39dafaa4",
      "range": {
        "startLine": 85,
        "startChar": 8,
        "endLine": 85,
        "endChar": 59
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54763964_e233cb18",
        "filename": "host-bmc/host_pdr_handler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 160,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-06-22T02:32:38Z",
      "side": 1,
      "message": "Why this indirect routing from fetchPDRResponseHandler -\u003eprocessHostPDRs  ? The response handler for GetPDR can be processHostPDRs.",
      "range": {
        "startLine": 150,
        "startChar": 0,
        "endLine": 160,
        "endChar": 6
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ea7f58f_36490d8a",
        "filename": "host-bmc/host_pdr_handler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 160,
      "author": {
        "id": 1000181
      },
      "writtenOn": "2021-06-26T12:16:53Z",
      "side": 1,
      "message": "i understand the code as: for each request that bmc sends, a new fetchPDRResponseHandler is created. in that case we can not do the processing of the PDRs in the handler. we need to remember the previous record handle and few other stuffs.\none more reason to separate this out is to maintain better clarity since processing the PDR is bit detailed",
      "parentUuid": "54763964_e233cb18",
      "range": {
        "startLine": 150,
        "startChar": 0,
        "endLine": 160,
        "endChar": 6
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55b06ab2_a4b2227d",
        "filename": "host-bmc/host_pdr_handler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 160,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-06-29T05:57:40Z",
      "side": 1,
      "message": "\u003e for each request that bmc sends, a new fetchPDRResponseHandler is created. in that case we can not do the processing of the PDRs in the handler.\n\nThe lambda is just providing an indirection it does not provide abstraction. You should be able to register processHostPDRs in the registerRequest and remove fetchPDRResponseHandler.",
      "parentUuid": "2ea7f58f_36490d8a",
      "range": {
        "startLine": 150,
        "startChar": 0,
        "endLine": 160,
        "endChar": 6
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4deca272_32f8fac8",
        "filename": "host-bmc/host_pdr_handler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 160,
      "author": {
        "id": 1000181
      },
      "writtenOn": "2021-06-30T09:46:07Z",
      "side": 1,
      "message": "done",
      "parentUuid": "55b06ab2_a4b2227d",
      "range": {
        "startLine": 150,
        "startChar": 0,
        "endLine": 160,
        "endChar": 6
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c3e47f1_32c12275",
        "filename": "host-bmc/host_pdr_handler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 444,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-06-22T02:32:38Z",
      "side": 1,
      "message": "Is this involves sending a PLDM request message to host, this can be synchronous. I don\u0027t see a value in Deferring it.",
      "range": {
        "startLine": 440,
        "startChar": 0,
        "endLine": 444,
        "endChar": 54
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b26a381d_85b8e42a",
        "filename": "host-bmc/host_pdr_handler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 444,
      "author": {
        "id": 1000181
      },
      "writtenOn": "2021-06-26T12:16:53Z",
      "side": 1,
      "message": "yeah this sends a request to Host. this has to be deferred otherwise we donot send response from the current command",
      "parentUuid": "0c3e47f1_32c12275",
      "range": {
        "startLine": 440,
        "startChar": 0,
        "endLine": 444,
        "endChar": 54
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d54b21fb_68785fb3",
        "filename": "host-bmc/host_pdr_handler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 444,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-06-29T05:57:40Z",
      "side": 1,
      "message": "We typically defer when action for a request is long running(BMC is responder) so respond with a PLDM response and then do the long running action.\n\nIn this case BMC is the requester and is processing the response of GetPDR, so what is the need to defer sending the RepoChanged Event?\n\nI think there is no need to defer this logic as well. (below)\n\n\u003e        deferredFetchPDREvent \u003d std::make_unique\u003csdeventplus::source::Defer\u003e(\n            event,\n            std::bind(std::mem_fn((\u0026HostPDRHandler::_processFetchPDREvent)),\n                      this, nextRecordHandle, std::placeholders::_1));",
      "parentUuid": "b26a381d_85b8e42a",
      "range": {
        "startLine": 440,
        "startChar": 0,
        "endLine": 444,
        "endChar": 54
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9f74327_57618e12",
        "filename": "host-bmc/host_pdr_handler.cpp",
        "patchSetId": 7
      },
      "lineNbr": 444,
      "author": {
        "id": 1000181
      },
      "writtenOn": "2021-06-30T09:46:07Z",
      "side": 1,
      "message": "this is the case where bmc should respond to the previous command before sending it\u0027s own request\nwe already faced issue where Host hangs when we request a new command instead of responding to the previous command\nhttps://gerrit.openbmc-project.xyz/c/openbmc/pldm/+/41113\nwith the above commit\nalso does adding a deferred event cause any performance issue?",
      "parentUuid": "d54b21fb_68785fb3",
      "range": {
        "startLine": 440,
        "startChar": 0,
        "endLine": 444,
        "endChar": 54
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "daad568d_1b5200f0",
        "filename": "host-bmc/host_pdr_handler.hpp",
        "patchSetId": 7
      },
      "lineNbr": 158,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-06-22T02:32:38Z",
      "side": 1,
      "message": "At least this should be renamed at a first look, there are already 3 function names fetchPDR/_fetchPDR/fetchPDRsOnStart, as well as improve the documentation around this.",
      "range": {
        "startLine": 158,
        "startChar": 4,
        "endLine": 158,
        "endChar": 25
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25e6f018_8285de1f",
        "filename": "host-bmc/host_pdr_handler.hpp",
        "patchSetId": 7
      },
      "lineNbr": 158,
      "author": {
        "id": 1000181
      },
      "writtenOn": "2021-06-26T12:16:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "daad568d_1b5200f0",
      "range": {
        "startLine": 158,
        "startChar": 4,
        "endLine": 158,
        "endChar": 25
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f29f353b_af0b0710",
        "filename": "host-bmc/host_pdr_handler.hpp",
        "patchSetId": 7
      },
      "lineNbr": 187,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-06-22T02:32:38Z",
      "side": 1,
      "message": "missing doxygen",
      "range": {
        "startLine": 187,
        "startChar": 2,
        "endLine": 187,
        "endChar": 52
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94ec05a3_0a52fb53",
        "filename": "host-bmc/host_pdr_handler.hpp",
        "patchSetId": 7
      },
      "lineNbr": 187,
      "author": {
        "id": 1000181
      },
      "writtenOn": "2021-06-26T12:16:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f29f353b_af0b0710",
      "range": {
        "startLine": 187,
        "startChar": 2,
        "endLine": 187,
        "endChar": 52
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3733d30_e9f8e299",
        "filename": "host-bmc/test/meson.build",
        "patchSetId": 7
      },
      "lineNbr": 7,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-06-22T02:32:38Z",
      "side": 1,
      "message": "Source files are typically added as dependency, why hpp?",
      "range": {
        "startLine": 6,
        "startChar": 0,
        "endLine": 7,
        "endChar": 43
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4feafc90_7c75b8af",
        "filename": "host-bmc/test/meson.build",
        "patchSetId": 7
      },
      "lineNbr": 7,
      "author": {
        "id": 1000181
      },
      "writtenOn": "2021-06-26T12:16:53Z",
      "side": 1,
      "message": "i guess there was some compilation error in building test cases. will check once more",
      "parentUuid": "a3733d30_e9f8e299",
      "range": {
        "startLine": 6,
        "startChar": 0,
        "endLine": 7,
        "endChar": 43
      },
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30b670ed_453a4a95",
        "filename": "requester/request.hpp",
        "patchSetId": 7
      },
      "lineNbr": 179,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-06-22T02:32:38Z",
      "side": 1,
      "message": "Why this change? I guess it is unintended.",
      "revId": "99b9f4d5e0fb9133e5ec037efae26fe7f5776d4f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}