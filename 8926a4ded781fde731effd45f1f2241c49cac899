{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5e66c76c_664faab3",
        "filename": "requester/handler.hpp",
        "patchSetId": 76
      },
      "lineNbr": 341,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-05-28T05:55:01Z",
      "side": 1,
      "message": "this seems like something that could potentially crash at certain times.\n\nThe `erase` function returns an iterator pointing to the element following the one removed. This is assigned to `it`. After erasing, `it` will be valid only if there are more elements after the erased element. If the erased element was the last one, `it` will equal `requestMsg.end()`.\n\n2. **Iterator Invalidation:**\n   - If `requestMsg` is a container that invalidates all iterators on modification (like `std::vector` or `std::deque`), then using the iterator after `erase` could lead to undefined behavior or a crash.",
      "range": {
        "startLine": 331,
        "startChar": 11,
        "endLine": 341,
        "endChar": 13
      },
      "revId": "8926a4ded781fde731effd45f1f2241c49cac899",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c109b5b_31fce646",
        "filename": "requester/handler.hpp",
        "patchSetId": 76
      },
      "lineNbr": 341,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-05-28T05:55:01Z",
      "side": 1,
      "message": "The `erase` function returns an iterator pointing to the element following the one removed. This is assigned to `it`.After erasing, `it` will be valid only if there are more elements after the erased element. If the erased element was the last one, `it` will equal `requestMsg.end()`. And again a `it++` could lead to a crash/ undefined behaviour.\n\ninstead i guess you could do an increment of the iterator only when you don\u0027t erase\n..may be something like this ?\n\n```\nfor (auto it \u003d requestMsg.begin(); it !\u003d requestMsg.end();)\n{\n    auto msg \u003d *it;\n    if (msg-\u003ekey \u003d\u003d key)\n    {\n        it \u003d endpointMessageQueues[eid]-\u003erequestQueue.erase(it); // erase and get the next valid iterator\n        instanceIdDb.free(key.eid, key.instanceId);\n        return PLDM_SUCCESS;\n    }\n    else\n    {\n        ++it; // increment iterator only if not erasing\n    }\n}\n```",
      "range": {
        "startLine": 330,
        "startChar": 12,
        "endLine": 341,
        "endChar": 13
      },
      "revId": "8926a4ded781fde731effd45f1f2241c49cac899",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ccf4e541_959f6462",
        "filename": "requester/handler.hpp",
        "patchSetId": 76
      },
      "lineNbr": 341,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-05-28T08:29:48Z",
      "side": 1,
      "message": "Thanks @ManojKiran. That\u0027s good point. I updated the code.",
      "parentUuid": "8c109b5b_31fce646",
      "range": {
        "startLine": 330,
        "startChar": 12,
        "endLine": 341,
        "endChar": 13
      },
      "revId": "8926a4ded781fde731effd45f1f2241c49cac899",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae3aba37_caed5f94",
        "filename": "requester/handler.hpp",
        "patchSetId": 76
      },
      "lineNbr": 341,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-05-28T08:29:48Z",
      "side": 1,
      "message": "I updated code.",
      "parentUuid": "5e66c76c_664faab3",
      "range": {
        "startLine": 331,
        "startChar": 11,
        "endLine": 341,
        "endChar": 13
      },
      "revId": "8926a4ded781fde731effd45f1f2241c49cac899",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e06739b1_cd61e8d2",
        "filename": "requester/handler.hpp",
        "patchSetId": 76
      },
      "lineNbr": 539,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2024-05-28T05:42:09Z",
      "side": 1,
      "message": "not a c++style of casting",
      "range": {
        "startLine": 539,
        "startChar": 59,
        "endLine": 539,
        "endChar": 76
      },
      "revId": "8926a4ded781fde731effd45f1f2241c49cac899",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "616ebf12_b3b2ea3e",
        "filename": "requester/handler.hpp",
        "patchSetId": 76
      },
      "lineNbr": 539,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-05-28T08:29:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e06739b1_cd61e8d2",
      "range": {
        "startLine": 539,
        "startChar": 59,
        "endLine": 539,
        "endChar": 76
      },
      "revId": "8926a4ded781fde731effd45f1f2241c49cac899",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}