{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "655a77ba_77891482",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 103
      },
      "lineNbr": 0,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-06-10T12:56:01Z",
      "side": 1,
      "message": "In the path set #102, I moved the code get and parse PDRs to `platform-mc: PDR Handling` path set.\n\nI also add the code to get the supported PLDM command in the `InitTerminus` steps. After this change the `doesSupportCommand` method is added to support checking if the terminus support on PLDM command type or not.",
      "revId": "ff21616f0796ac24f07f6584757e1df68f6c3c7f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1cb83f60_e32d6a56",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 103
      },
      "lineNbr": 0,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-06-10T12:58:14Z",
      "side": 1,
      "message": "The trace format and trace log position is also standardized for all of patch set in the chain and also my future patch sets.",
      "revId": "ff21616f0796ac24f07f6584757e1df68f6c3c7f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c8cfc57_6f6a84b4",
        "filename": "platform-mc/terminus.cpp",
        "patchSetId": 103
      },
      "lineNbr": 31,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-06-11T02:11:04Z",
      "side": 1,
      "message": "check if idx \u003e\u003d supportedCmds.size() first and log an error ?",
      "revId": "ff21616f0796ac24f07f6584757e1df68f6c3c7f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "738f06a9_ebd731dc",
        "filename": "platform-mc/terminus.cpp",
        "patchSetId": 103
      },
      "lineNbr": 34,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-06-11T02:11:04Z",
      "side": 1,
      "message": "function name is redundant , please remove. \n\nand also this is lg2::info instead of error ?",
      "range": {
        "startLine": 34,
        "startChar": 17,
        "endLine": 34,
        "endChar": 35
      },
      "revId": "ff21616f0796ac24f07f6584757e1df68f6c3c7f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e5133f5_ae53d331",
        "filename": "platform-mc/terminus.hpp",
        "patchSetId": 103
      },
      "lineNbr": 48,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-06-11T02:11:04Z",
      "side": 1,
      "message": "const reference here ?",
      "range": {
        "startLine": 48,
        "startChar": 30,
        "endLine": 48,
        "endChar": 57
      },
      "revId": "ff21616f0796ac24f07f6584757e1df68f6c3c7f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7c109d2_923fdc8d",
        "filename": "platform-mc/terminus.hpp",
        "patchSetId": 103
      },
      "lineNbr": 50,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-06-11T02:11:04Z",
      "side": 1,
      "message": "check for cmds.empty() first ?",
      "revId": "ff21616f0796ac24f07f6584757e1df68f6c3c7f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d39dcd51_757bba27",
        "filename": "platform-mc/terminus.hpp",
        "patchSetId": 103
      },
      "lineNbr": 59,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-06-11T02:11:04Z",
      "side": 1,
      "message": "if cmds.size() is more than supportedCmds.size() , this could lead to out-of-bound exception.",
      "range": {
        "startLine": 59,
        "startChar": 11,
        "endLine": 59,
        "endChar": 39
      },
      "revId": "ff21616f0796ac24f07f6584757e1df68f6c3c7f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75641d4b_420754e0",
        "filename": "platform-mc/terminus.hpp",
        "patchSetId": 103
      },
      "lineNbr": 63,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-06-11T02:11:04Z",
      "side": 1,
      "message": "instead of bit by bit copy, you could probably use std::copy instead () ? may be something like this ? \n\n```\nbool setSupportedCommands(const std::vector\u003cstd::bitset\u003c8\u003e\u003e\u0026 cmds) {\n    const size_t expectedSize \u003d PLDM_MAX_TYPES * (PLDM_MAX_CMDS_PER_TYPE / 8);\n    if (cmds.empty() || cmds.size() !\u003d expectedSize) {\n        lg2::error(\"setSupportedCommands received invalid bit mask size. Expected: {EXPECTED}, Received: {RECEIVED}\",\n                   \"EXPECTED\", expectedSize, \"RECEIVED\", cmds.size());\n        return false;\n    }\n    \n    // Ensure not to go beyond the boundary of supportedCmds\n    const size_t copySize \u003d std::min(cmds.size(), supportedCmds.size());\n    std::copy(cmds.begin(), cmds.begin() + copySize, supportedCmds.begin());\n    return true;\n}\n```",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 63,
        "endChar": 6
      },
      "revId": "ff21616f0796ac24f07f6584757e1df68f6c3c7f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "664d754a_63feb038",
        "filename": "platform-mc/terminus_manager.cpp",
        "patchSetId": 103
      },
      "lineNbr": 96,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-06-11T02:11:04Z",
      "side": 1,
      "message": "map.contains() from c++20 is much more readable. can you please change this to contains() ?  \nhttps://en.cppreference.com/w/cpp/container/map/contains",
      "range": {
        "startLine": 95,
        "startChar": 2,
        "endLine": 96,
        "endChar": 65
      },
      "revId": "ff21616f0796ac24f07f6584757e1df68f6c3c7f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6380de1e_bef667ad",
        "filename": "platform-mc/terminus_manager.cpp",
        "patchSetId": 103
      },
      "lineNbr": 101,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-06-11T02:11:04Z",
      "side": 1,
      "message": "same here as well.",
      "revId": "ff21616f0796ac24f07f6584757e1df68f6c3c7f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "385f0883_53ddc7a9",
        "filename": "platform-mc/terminus_manager.cpp",
        "patchSetId": 103
      },
      "lineNbr": 333,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-06-11T02:11:04Z",
      "side": 1,
      "message": "aren\u0027t we supposed to return here with PLDM_ERROR ?",
      "revId": "ff21616f0796ac24f07f6584757e1df68f6c3c7f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee20784c_5cb90557",
        "filename": "platform-mc/terminus_manager.cpp",
        "patchSetId": 103
      },
      "lineNbr": 338,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-06-11T02:11:04Z",
      "side": 1,
      "message": "```\nif (idx \u003e\u003d pldmCmds.size())\n{\n            lg2::error(\n                \"Calculated index {IDX} out of bounds for pldmCmds, type {TYPE}, command index {CMD_IDX}\",\n                \"IDX\", idx, \"TYPE\", type, \"CMD_IDX\", i);\n            continue;\n}\n```",
      "range": {
        "startLine": 338,
        "startChar": 0,
        "endLine": 338,
        "endChar": 41
      },
      "revId": "ff21616f0796ac24f07f6584757e1df68f6c3c7f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "427f0c66_2b916105",
        "filename": "platform-mc/terminus_manager.cpp",
        "patchSetId": 103
      },
      "lineNbr": 584,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-06-11T02:11:04Z",
      "side": 1,
      "message": "toMctpInfo() returns an std::optional right ? should not we check for has_value() ?\n  \n  ```\n  auto mctpInfo \u003d toMctpInfo(tid);\n    if (!mctpInfo.has_value())\n    {\n        // Log error or return a more specific error code if needed\n        co_return PLDM_ERROR;\n    }\n    ```",
      "range": {
        "startLine": 580,
        "startChar": 0,
        "endLine": 584,
        "endChar": 5
      },
      "revId": "ff21616f0796ac24f07f6584757e1df68f6c3c7f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42d5106b_0c9533ee",
        "filename": "platform-mc/terminus_manager.cpp",
        "patchSetId": 103
      },
      "lineNbr": 589,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-06-11T02:11:04Z",
      "side": 1,
      "message": "ensure responseMsg and responseLen are not nullptr ? before ?\n ```\n    if (!responseMsg || !responseLen)\n    {\n        co_return PLDM_ERROR_INVALID_DATA;\n    }\n    ```",
      "revId": "ff21616f0796ac24f07f6584757e1df68f6c3c7f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01d219ee_0cb27914",
        "filename": "platform-mc/terminus_manager.hpp",
        "patchSetId": 103
      },
      "lineNbr": 146,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-06-11T02:11:04Z",
      "side": 1,
      "message": "why is this moved to public in the refactoring ?",
      "revId": "ff21616f0796ac24f07f6584757e1df68f6c3c7f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}