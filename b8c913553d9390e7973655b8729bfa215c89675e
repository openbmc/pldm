{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cdde2349_1463c88f",
        "filename": "requester/mctp_endpoint_discovery.cpp",
        "patchSetId": 23
      },
      "lineNbr": 74,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2022-08-18T08:08:45Z",
      "side": 1,
      "message": "nit: Nothing to do as part of this change but adding here as a future note.\n\nIf we are supporting multiple mctp networks(or supporting multiple MCTP daemons which expose above interface) there is a possibility of duplicate EIDs. In that case we might need to distinguish them with network ID or UUID(which should not be empty).",
      "range": {
        "startLine": 74,
        "startChar": 61,
        "endLine": 74,
        "endChar": 70
      },
      "revId": "b8c913553d9390e7973655b8729bfa215c89675e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "caf06711_bbefcc7d",
        "filename": "requester/mctp_endpoint_discovery.cpp",
        "patchSetId": 23
      },
      "lineNbr": 74,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-08-10T01:56:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cdde2349_1463c88f",
      "range": {
        "startLine": 74,
        "startChar": 61,
        "endLine": 74,
        "endChar": 70
      },
      "revId": "b8c913553d9390e7973655b8729bfa215c89675e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b320c972_a31bd703",
        "filename": "requester/mctp_endpoint_discovery.cpp",
        "patchSetId": 23
      },
      "lineNbr": 149,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2022-08-18T08:08:45Z",
      "side": 1,
      "message": "I see we are explicitly checking if PLDM is a supported MCTP type.\nAre we planning to have common platform level staticEIDTable for all PMCI protocols which run over MCTP?",
      "range": {
        "startLine": 149,
        "startChar": 50,
        "endLine": 149,
        "endChar": 62
      },
      "revId": "b8c913553d9390e7973655b8729bfa215c89675e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b46f0aa8_832b6e79",
        "filename": "requester/mctp_endpoint_discovery.cpp",
        "patchSetId": 23
      },
      "lineNbr": 149,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2023-08-10T01:56:52Z",
      "side": 1,
      "message": "I suggest to add other patch sets to support different message types, because the current file name is `mctp-endpoint-discovery.*` which already assume that the code is for mctp endpoint type.",
      "parentUuid": "b320c972_a31bd703",
      "range": {
        "startLine": 149,
        "startChar": 50,
        "endLine": 149,
        "endChar": 62
      },
      "revId": "b8c913553d9390e7973655b8729bfa215c89675e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7769c32_e3e11c04",
        "filename": "requester/mctp_endpoint_discovery.hpp",
        "patchSetId": 23
      },
      "lineNbr": 27,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2022-08-18T08:08:45Z",
      "side": 1,
      "message": "nit: Let\u0027s be consistent about using keyword \u0027MCTP\u0027 or Mctp. As per our openbmc coding guideline acronyms should be of same case throughout https://github.com/openbmc/docs/blob/master/cpp-style-and-conventions.md#naming-conventions.\n\nI see that existing code is not following it. But atleast let\u0027s try to stick with one format for function names, class names etc.. throughout.",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 27,
        "endChar": 69
      },
      "revId": "b8c913553d9390e7973655b8729bfa215c89675e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d547f150_75dce44b",
        "filename": "requester/mctp_endpoint_discovery.hpp",
        "patchSetId": 23
      },
      "lineNbr": 27,
      "author": {
        "id": 1000957
      },
      "writtenOn": "2022-08-28T07:37:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a7769c32_e3e11c04",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 27,
        "endChar": 69
      },
      "revId": "b8c913553d9390e7973655b8729bfa215c89675e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70f2dda4_8eb466ed",
        "filename": "requester/test/mctp_endpoint_discovery_test.cpp",
        "patchSetId": 23
      },
      "lineNbr": 11,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2022-08-18T08:08:45Z",
      "side": 1,
      "message": "nit: `SingleHandleMCTPEndpoint`",
      "range": {
        "startLine": 11,
        "startChar": 32,
        "endLine": 11,
        "endChar": 56
      },
      "revId": "b8c913553d9390e7973655b8729bfa215c89675e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be0c40aa_2c4c73df",
        "filename": "requester/test/mctp_endpoint_discovery_test.cpp",
        "patchSetId": 23
      },
      "lineNbr": 11,
      "author": {
        "id": 1000957
      },
      "writtenOn": "2022-08-28T07:37:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "70f2dda4_8eb466ed",
      "range": {
        "startLine": 11,
        "startChar": 32,
        "endLine": 11,
        "endChar": 56
      },
      "revId": "b8c913553d9390e7973655b8729bfa215c89675e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6008524_dbf13591",
        "filename": "requester/test/static_eid_table.json",
        "patchSetId": 23
      },
      "lineNbr": 4,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2022-08-18T08:08:45Z",
      "side": 1,
      "message": "Does multiple MCTP network support in scope for this review?",
      "range": {
        "startLine": 4,
        "startChar": 0,
        "endLine": 4,
        "endChar": 29
      },
      "revId": "b8c913553d9390e7973655b8729bfa215c89675e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0b00d0e_bb2cc3d4",
        "filename": "requester/test/static_eid_table.json",
        "patchSetId": 23
      },
      "lineNbr": 4,
      "author": {
        "id": 1000957
      },
      "writtenOn": "2022-08-28T07:37:11Z",
      "side": 1,
      "message": "The multiple MCTP network support  is not in scope when the patch set was submitted.\nCan it be addressed by another patch set? Since networkd ID is an optional property in the description of https://github.com/openbmc/phosphor-dbus-interfaces/tree/master/yaml/xyz/openbmc_project/MCTP",
      "parentUuid": "a6008524_dbf13591",
      "range": {
        "startLine": 4,
        "startChar": 0,
        "endLine": 4,
        "endChar": 29
      },
      "revId": "b8c913553d9390e7973655b8729bfa215c89675e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07f77226_863d78cb",
        "filename": "requester/test/static_eid_table.json",
        "patchSetId": 23
      },
      "lineNbr": 4,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2022-09-02T06:15:29Z",
      "side": 1,
      "message": "1. Yes, If multiple MCTP network is not in scope, i would suggest not to include \"NetworkId\" key in the json as part of this change. It can be added later along with code support.\n2. @Jermy/@Tom, Can we make the NetworkId exposed from kernel a mandatory field? I think it might make things easier for upper layer protocols. \nWe can mandate the int based network id or the MCTP spec provided network id(The UUID format one).",
      "parentUuid": "b0b00d0e_bb2cc3d4",
      "range": {
        "startLine": 4,
        "startChar": 0,
        "endLine": 4,
        "endChar": 29
      },
      "revId": "b8c913553d9390e7973655b8729bfa215c89675e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d9c061c_a07327f2",
        "filename": "requester/test/static_eid_table.json",
        "patchSetId": 23
      },
      "lineNbr": 4,
      "author": {
        "id": 1000957
      },
      "writtenOn": "2022-09-02T08:38:44Z",
      "side": 1,
      "message": "The three properties(networkdId, eid, supportedMessageTypes) in json are referred to /xyz/openbmc_project/MCTP/Endpoint.interface.yaml.\nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/MCTP/Endpoint.interface.yaml\n\nTo support mapping TID across multiple MCTP networks is suggested and fixed in patch set 51442(https://gerrit.openbmc.org/c/openbmc/pldm/+/51443/35), so the code changes of parsing \"NetworkId\" properties are added in that patch set.",
      "parentUuid": "07f77226_863d78cb",
      "range": {
        "startLine": 4,
        "startChar": 0,
        "endLine": 4,
        "endChar": 29
      },
      "revId": "b8c913553d9390e7973655b8729bfa215c89675e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20aa820e_a4cc957d",
        "filename": "requester/test/static_eid_table.json",
        "patchSetId": 23
      },
      "lineNbr": 4,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2022-10-17T06:36:58Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6d9c061c_a07327f2",
      "range": {
        "startLine": 4,
        "startChar": 0,
        "endLine": 4,
        "endChar": 29
      },
      "revId": "b8c913553d9390e7973655b8729bfa215c89675e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}