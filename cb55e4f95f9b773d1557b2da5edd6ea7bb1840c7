{
  "comments": [
    {
      "key": {
        "uuid": "bd20da79_a7c073c8",
        "filename": "oem/ibm/test/host_bmc_lamp_test.cpp",
        "patchSetId": 14
      },
      "lineNbr": 22,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2021-04-05T07:42:19Z",
      "side": 1,
      "message": "Just to create these MOCK\u0027s we don\u0027t need another class \"TestInterace\" right ?.. Guess, I am not following why the abstract class HostLampTestInterface was needed.",
      "revId": "cb55e4f95f9b773d1557b2da5edd6ea7bb1840c7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d40005dd_17ca8abf",
        "filename": "oem/ibm/test/host_bmc_lamp_test.cpp",
        "patchSetId": 14
      },
      "lineNbr": 22,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2021-04-07T08:35:58Z",
      "side": 1,
      "message": "\u003e Just to create these MOCK\u0027s we don\u0027t need another class \"TestInterace\" right ?\n\nYes.\nAccording to my understanding: when we want to mock any method, the method must be a virtual method defined in the abstract interface.",
      "parentUuid": "bd20da79_a7c073c8",
      "revId": "cb55e4f95f9b773d1557b2da5edd6ea7bb1840c7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9b88a1b_16d477cd",
        "filename": "oem/ibm/test/host_bmc_lamp_test.cpp",
        "patchSetId": 14
      },
      "lineNbr": 22,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2021-04-07T10:06:19Z",
      "side": 1,
      "message": "ah yes.. While it\u0027s still possible to MOCK Non virtual functions, but it\u0027s more complicated.. ( Just for ref: https://chromium.googlesource.com/external/github.com/google/googletest/+/HEAD/docs/gmock_cook_book.md#MockingNonVirtualMethods )\n\nI am fine with virtual what you have here.",
      "parentUuid": "d40005dd_17ca8abf",
      "revId": "cb55e4f95f9b773d1557b2da5edd6ea7bb1840c7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "088463bd_92784391",
        "filename": "oem/ibm/test/host_bmc_lamp_test.cpp",
        "patchSetId": 14
      },
      "lineNbr": 22,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2021-04-07T10:12:09Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c9b88a1b_16d477cd",
      "revId": "cb55e4f95f9b773d1557b2da5edd6ea7bb1840c7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a0d1d2d_3fc08d1e",
        "filename": "oem/ibm/test/host_bmc_lamp_test.cpp",
        "patchSetId": 14
      },
      "lineNbr": 35,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2021-04-05T07:42:19Z",
      "side": 1,
      "message": "hmm.. how is this satisfied ?.. I see getEffectorID gets called only if asserted\u003d\u003dtrue. However, the test case below sets asserted\u003dtrue just once.",
      "revId": "cb55e4f95f9b773d1557b2da5edd6ea7bb1840c7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "069ce00b_0481127d",
        "filename": "oem/ibm/test/host_bmc_lamp_test.cpp",
        "patchSetId": 14
      },
      "lineNbr": 35,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2021-04-07T08:35:58Z",
      "side": 1,
      "message": "We set asserted\u003d\u003dtrue twice, Right?\n\nThe first time I expected the getEffecterID method to return 0.\nsee: https://gerrit.openbmc-project.xyz/c/openbmc/pldm/+/40373/14/oem/ibm/host-bmc/host_lamp_test.cpp#42\nSo it did not make any changes, the Asserted property is still `false`, Right?\n\nThe second time I expected the getEffecterID method to return 1(Non-zero)ï¼Œ\nat this time, the Asserted property will be changed to true, Right?",
      "parentUuid": "3a0d1d2d_3fc08d1e",
      "revId": "cb55e4f95f9b773d1557b2da5edd6ea7bb1840c7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "221efcd5_cb7b0821",
        "filename": "oem/ibm/test/host_bmc_lamp_test.cpp",
        "patchSetId": 14
      },
      "lineNbr": 35,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2021-04-07T10:06:19Z",
      "side": 1,
      "message": "oops. I overlooked line 43 down below since line 44 influenced me.. thanks..\nbut how is line: 44 passing ?. it should EXPECT_EQ, true right ?",
      "parentUuid": "069ce00b_0481127d",
      "revId": "cb55e4f95f9b773d1557b2da5edd6ea7bb1840c7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f197b91_337bf5c5",
        "filename": "oem/ibm/test/host_bmc_lamp_test.cpp",
        "patchSetId": 14
      },
      "lineNbr": 35,
      "author": {
        "id": 1000397
      },
      "writtenOn": "2021-04-07T10:12:09Z",
      "side": 1,
      "message": "\u003e but how is line: 44 passing ?. it should EXPECT_EQ, true right ?\n\nNo, as i said: When we set the Asserted property to true for the first time, I expect the getEffecterID method to return 0, so Asserted property will not be updated.\nsee: https://gerrit.openbmc-project.xyz/c/openbmc/pldm/+/40373/14/oem/ibm/host-bmc/host_lamp_test.cpp#44",
      "parentUuid": "221efcd5_cb7b0821",
      "revId": "cb55e4f95f9b773d1557b2da5edd6ea7bb1840c7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}