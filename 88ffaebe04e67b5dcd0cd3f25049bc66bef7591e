{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0559537a_0b8e5db1",
        "filename": "pldmd/dbus_impl_requester.hpp",
        "patchSetId": 12
      },
      "lineNbr": 52,
      "author": {
        "id": 1001384
      },
      "writtenOn": "2023-05-08T20:16:16Z",
      "side": 1,
      "message": "next function throws two different types of exceptions\nstd::runtime_error (https://gerrit.openbmc.org/c/openbmc/pldm/+/62580/12/pldmd/instance_id.hpp#54)\nstd::system_category().default_error_condition (https://gerrit.openbmc.org/c/openbmc/pldm/+/62580/12/pldmd/instance_id.hpp#59)\n\nNeed to catch those exceptions use catch{} and handle properly.\n\nOr do you expect the caller of getInstanceIs to catch the exceptions?",
      "revId": "88ffaebe04e67b5dcd0cd3f25049bc66bef7591e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44c1a68f_1b26a3ed",
        "filename": "pldmd/dbus_impl_requester.hpp",
        "patchSetId": 12
      },
      "lineNbr": 52,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-05-09T00:02:59Z",
      "side": 1,
      "message": "I\u0027ve changed it so we throw TooManyResources if there are no instance ids available (like before this change). I think throwing std::system_category().default_error_condition if there is something wrong with the instance ID database is reasonable. If there is something wrong with that, there is nothing we can do here to fix it. \n\nDo you agree?",
      "parentUuid": "0559537a_0b8e5db1",
      "revId": "88ffaebe04e67b5dcd0cd3f25049bc66bef7591e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8a5bf32_8970f952",
        "filename": "pldmd/dbus_impl_requester.hpp",
        "patchSetId": 12
      },
      "lineNbr": 52,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-05-09T00:10:34Z",
      "side": 1,
      "message": "\u003e next function throws two different types of exceptions\n\u003e std::runtime_error (https://gerrit.openbmc.org/c/openbmc/pldm/+/62580/12/pldmd/instance_id.hpp#54)\n\nYep, the `std::runtime_error` should be handled as outlined in the comment below.\n\n\u003e std::system_category().default_error_condition (https://gerrit.openbmc.org/c/openbmc/pldm/+/62580/12/pldmd/instance_id.hpp#59)\n\u003e \n\u003e Need to catch those exceptions use catch{} and handle properly.\n\u003e \n\u003e Or do you expect the caller of getInstanceIs to catch the exceptions?\n\nThere\u0027s nothing sensible we can do for exceptions other than the `std::runtime_error` when the instance IDs are exhausted. We can\u0027t reliably send PLDM messages if we can\u0027t reliably allocate instance IDs. Thus not attempting to handle the exception is the right course of action.",
      "parentUuid": "0559537a_0b8e5db1",
      "revId": "88ffaebe04e67b5dcd0cd3f25049bc66bef7591e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5aab128_cb1072cd",
        "filename": "pldmd/dbus_impl_requester.hpp",
        "patchSetId": 12
      },
      "lineNbr": 53,
      "author": {
        "id": 1001384
      },
      "writtenOn": "2023-05-08T20:16:16Z",
      "side": 1,
      "message": "We will never enter this path where rc is set to -EAGAIN. This condition should be covered under catch.",
      "revId": "88ffaebe04e67b5dcd0cd3f25049bc66bef7591e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea2a95d1_699d8692",
        "filename": "pldmd/dbus_impl_requester.hpp",
        "patchSetId": 12
      },
      "lineNbr": 53,
      "author": {
        "id": 1000224
      },
      "writtenOn": "2023-05-09T00:02:59Z",
      "side": 1,
      "message": "Good spot. Fixed.",
      "parentUuid": "a5aab128_cb1072cd",
      "revId": "88ffaebe04e67b5dcd0cd3f25049bc66bef7591e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98463f8c_e8681173",
        "filename": "pldmd/dbus_impl_requester.hpp",
        "patchSetId": 12
      },
      "lineNbr": 53,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-05-09T00:10:34Z",
      "side": 1,
      "message": "Ah, yes, I refactored the `InstanceIdDb.next()` implementation so it threw the `std::runtime_error` instead of returning `-EAGAIN`. This new behaviour aligns it with the existing behaviour in the code. However, the check you highlighted should be replaced with\n\n```\ntry {\n    rc \u003d pldmInstanceIdDb.next(eid);\n} catch (const\u0026 std::runtime_error e) {\n    throw sdbusplus::xyz::openbmc_project::Common::Error::TooManyResources();\n}\n```",
      "parentUuid": "a5aab128_cb1072cd",
      "revId": "88ffaebe04e67b5dcd0cd3f25049bc66bef7591e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5845efd7_6e63e52c",
        "filename": "pldmd/dbus_impl_requester.hpp",
        "patchSetId": 12
      },
      "lineNbr": 53,
      "author": {
        "id": 1001384
      },
      "writtenOn": "2023-05-09T05:46:58Z",
      "side": 1,
      "message": "Shall we add one more catch to catch std::system_category().default_error_condition exception?\ntry {\n    rc \u003d pldmInstanceIdDb.next(eid);\n} catch (const\u0026 std::runtime_error e) {\n    throw sdbusplus::xyz::openbmc_project::Common::Error::TooManyResources();\n} catch (int error)\n{\n}",
      "parentUuid": "98463f8c_e8681173",
      "revId": "88ffaebe04e67b5dcd0cd3f25049bc66bef7591e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6786c02_9f7ec7ff",
        "filename": "pldmd/dbus_impl_requester.hpp",
        "patchSetId": 12
      },
      "lineNbr": 53,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-05-09T06:12:15Z",
      "side": 1,
      "message": "Right, but you haven\u0027t answered the question of what to put in the body of that catch statement. There\u0027s almost nothing sensible you can do, the database is in an inoperable state and you can\u0027t exchange PLDM messages. There\u0027s no point trying to salvage the situation. We might as well let pldmd abort out as this at least gives us accurate information about what the problem was and where it occurred.\n\nSpecifically, see this anti-pattern:\n\nhttps://github.com/openbmc/docs/blob/master/anti-patterns.md#handling-unexpected-error-codes-and-exceptions",
      "parentUuid": "5845efd7_6e63e52c",
      "revId": "88ffaebe04e67b5dcd0cd3f25049bc66bef7591e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c75d6960_77676c6b",
        "filename": "pldmd/dbus_impl_requester.hpp",
        "patchSetId": 12
      },
      "lineNbr": 53,
      "author": {
        "id": 1001384
      },
      "writtenOn": "2023-05-12T10:17:52Z",
      "side": 1,
      "message": "The only thing we can do is exit with error code than crashing/aborting PLDM. But really not sure if that is preferred.",
      "parentUuid": "b6786c02_9f7ec7ff",
      "revId": "88ffaebe04e67b5dcd0cd3f25049bc66bef7591e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5bf4cbb3_6498dd2e",
        "filename": "pldmd/dbus_impl_requester.hpp",
        "patchSetId": 12
      },
      "lineNbr": 53,
      "author": {
        "id": 1001384
      },
      "writtenOn": "2023-05-12T11:29:05Z",
      "side": 1,
      "message": "As no specific action to be taken after instance id failure and PLDM abort will give us accurate information about what the problem was and where it occurred. I accept to not handle the exception std::system_category().default_error_condition.",
      "parentUuid": "c75d6960_77676c6b",
      "revId": "88ffaebe04e67b5dcd0cd3f25049bc66bef7591e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}