{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ff894df7_d3ff5929",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-14T11:27:50Z",
      "side": 1,
      "message": "WHY ARE WE MAKING OUR OWN CLANG-TIDY FILES!?  There is on-going work both posted to the mailing list and underway in docs to make a standardized clang-tidy.  Most of these checks are absolute garbage for BMC code and just make it harder and harder for us to upgrade clang.",
      "revId": "9948a7d7db66d384dc6cf21d34edd9bbc010bf55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f1423a1_3660862a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-05-15T05:54:11Z",
      "side": 1,
      "message": "I understand your concern, and I agree that having a consistent, OpenBMC-specific clang-tidy configuration for both C and C++ is important. Are you referring to the email thread from Jayanth (https://lore.kernel.org/openbmc/CACkAXSo87MHi-+A2ZWLijejAdxfK89suaZC+4AN\u003d+UnwZr2afg@mail.gmail.com/)? As far as I can tell, many of the patches mentioned there have either been abandoned or are in the process of being reconsidered.\n\nIt seems that as a community, we\u0027re still in the process of evaluating what a common, practical clang-tidy configuration for OpenBMC should look like. Personally, I\u0027m very much in favor of arriving at a shared standard that works well for everyone.\n\nRegarding this particular commit: the CERT C and C++ Coding Standards are intended to help identify insecure coding practices and avoid undefined behaviors. From that standpoint, I thought enabling some of these checks could be beneficial in catching potential issues during code review. That said, I’m curious to better understand your concerns. You mentioned these checks being \"garbage for BMC code\" and that they make it more difficult to upgrade Clang. I’d really appreciate it if you could elaborate on the specific challenges you\u0027ve encountered. If these checks are adding unnecessary overhead or creating friction in the development process, I\u0027m happy to work with you on refining the approach so that it aligns better with our project needs.",
      "parentUuid": "ff894df7_d3ff5929",
      "revId": "9948a7d7db66d384dc6cf21d34edd9bbc010bf55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "876f73c6_ca6d4e78",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-05-15T06:09:50Z",
      "side": 1,
      "message": "Do you want us \u0026 everyone to just use https://github.com/openbmc/docs/blob/master/style/cpp/.clang-tidy ?",
      "parentUuid": "5f1423a1_3660862a",
      "revId": "9948a7d7db66d384dc6cf21d34edd9bbc010bf55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75687b43_c9b925ee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T11:09:09Z",
      "side": 1,
      "message": "\u003e As far as I can tell, many of the patches mentioned there have either been abandoned or are in the process of being reconsidered.\n\nThey were abandoned because the consensus was to enable a very minimal set of checks as a POC and roll that out to all the repositories.  Then we would add individual checks as we got further consensus.\n\n\u003e You mentioned these checks being \"garbage for BMC code\" and that they make it more difficult to upgrade Clang.  I’d really appreciate it if you could elaborate on the specific challenges you\u0027ve encountered.\n\nI\u0027m not going to go through every single option.  This is why we wanted them added in common code reviews.  Some of the clang-tidy options we\u0027ve found to not be stable and/or bugproof on its own.\n\nbugprone-unchecked-optional-access \u003c-- yesterday I had to fix spurious warnings introduced by clang-20 on this one. https://gerrit.openbmc.org/c/openbmc/dbus-sensors/+/80322\n\nbugprone-no-escape, \u003c-- totally not relevant for BMC work.\n\nbugprone-lambda-function-name \u003c-- potentially breaks macros from other libraries.\n\nA bunch of the clang-analyzer ones introduced in the next commit are for very specific environments which are not OpenBMC.\n\nmodernize-use-transparent-functors \u003c-- probably needs SafeMode?\n\nAll of the \"cert\" ones that got enabled here are actually aliases for other checks.  Do we want to use the \"cert\" alias or the more readable check?  \"cert-dcl37-c\" \u003d\u003d \"bugprone-reserved-identifier\".  To me the later is far more understandable at quick glance.  And, enabling this likely breaks our usage of stdexec in sdbusplus, so we can\u0027t roll this one out everywhere.\n\n\u003e Do you want us \u0026 everyone to just use \n\nThe consensus was that the docs one would be the maximal set of accepted checks across the projects, yes.  ie. A repository could use less than the ones enabled there but shouldn\u0027t be enabling other checks.",
      "parentUuid": "876f73c6_ca6d4e78",
      "revId": "9948a7d7db66d384dc6cf21d34edd9bbc010bf55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42f9f448_da106ee3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2025-05-19T02:15:50Z",
      "side": 1,
      "message": "Thanks for the clarification — this all makes a lot more sense now.\n\nI hadn’t realized how messy things had gotten around this lately. Given the current direction and consensus, I’m going ahead and reverting the .clang-tidy in pldm to match the version from docs (https://gerrit.openbmc.org/c/openbmc/pldm/+/80410).\n\nWe definitely don’t want to diverge from the rest of the community, and maintaining a separate file here just adds unnecessary overhead. Aligning with the shared baseline will make things simpler and easier to manage moving forward.\n\nThanks again for the context!\n\n@pavithra - With the above in context, this will impact the clang check patches that you already have in review. If you think any of these changes makes sense to the community in general, then would suggest you to push them to docs and get a consensus before we pull that change in here.",
      "parentUuid": "75687b43_c9b925ee",
      "revId": "9948a7d7db66d384dc6cf21d34edd9bbc010bf55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47d17739_4cc263a5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2025-05-20T05:36:07Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "42f9f448_da106ee3",
      "revId": "9948a7d7db66d384dc6cf21d34edd9bbc010bf55",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ],
  "submitRequirementResults": []
}