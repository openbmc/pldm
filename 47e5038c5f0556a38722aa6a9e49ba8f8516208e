{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "55f6db3d_9f29cd15",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-10-25T03:12:50Z",
      "side": 1,
      "message": "@thu - please add your self as a maintainer for all the files in ampere folder.\n\nwould looks something like this \n\n```\n- partial_regex: ampere/\n  owners:\n  - \u003cyour email\u003e\n```",
      "revId": "47e5038c5f0556a38722aa6a9e49ba8f8516208e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d5f6ce1_e9671077",
        "filename": "meson.build",
        "patchSetId": 9
      },
      "lineNbr": 141,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-10-25T03:12:50Z",
      "side": 1,
      "message": "oem-ampere",
      "range": {
        "startLine": 141,
        "startChar": 15,
        "endLine": 141,
        "endChar": 21
      },
      "revId": "47e5038c5f0556a38722aa6a9e49ba8f8516208e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "385e28d3_bc2c06e3",
        "filename": "meson.build",
        "patchSetId": 9
      },
      "lineNbr": 141,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-10-28T07:22:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1d5f6ce1_e9671077",
      "range": {
        "startLine": 141,
        "startChar": 15,
        "endLine": 141,
        "endChar": 21
      },
      "revId": "47e5038c5f0556a38722aa6a9e49ba8f8516208e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "163fe17f_f24606bb",
        "filename": "meson.build",
        "patchSetId": 9
      },
      "lineNbr": 142,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-10-25T03:12:50Z",
      "side": 1,
      "message": "-DOEM-AMPERE\n\nlets be little explicit that its OEM code by adding OEM",
      "range": {
        "startLine": 142,
        "startChar": 27,
        "endLine": 142,
        "endChar": 35
      },
      "revId": "47e5038c5f0556a38722aa6a9e49ba8f8516208e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd6c979a_e0e4688a",
        "filename": "meson.build",
        "patchSetId": 9
      },
      "lineNbr": 142,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-10-28T07:22:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "163fe17f_f24606bb",
      "range": {
        "startLine": 142,
        "startChar": 27,
        "endLine": 142,
        "endChar": 35
      },
      "revId": "47e5038c5f0556a38722aa6a9e49ba8f8516208e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd5a36c3_b37b7d68",
        "filename": "meson.build",
        "patchSetId": 9
      },
      "lineNbr": 242,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-10-25T03:12:50Z",
      "side": 1,
      "message": "this is not how we do for oem-ibm, define a new meson.build in your oem folder , call that subdir() ..and then append the files to the existing files that does into the executable.",
      "range": {
        "startLine": 237,
        "startChar": 0,
        "endLine": 242,
        "endChar": 5
      },
      "revId": "47e5038c5f0556a38722aa6a9e49ba8f8516208e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27309e6e_55f72e76",
        "filename": "meson.build",
        "patchSetId": 9
      },
      "lineNbr": 242,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-10-28T07:22:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dd5a36c3_b37b7d68",
      "range": {
        "startLine": 237,
        "startChar": 0,
        "endLine": 242,
        "endChar": 5
      },
      "revId": "47e5038c5f0556a38722aa6a9e49ba8f8516208e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b278d40_98ec9435",
        "filename": "meson.options",
        "patchSetId": 9
      },
      "lineNbr": 213,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-10-25T03:12:50Z",
      "side": 1,
      "message": "please move this to the oem section.",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 213,
        "endChar": 7
      },
      "revId": "47e5038c5f0556a38722aa6a9e49ba8f8516208e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09c28c92_e6c75e8a",
        "filename": "meson.options",
        "patchSetId": 9
      },
      "lineNbr": 213,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-10-28T07:22:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6b278d40_98ec9435",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 213,
        "endChar": 7
      },
      "revId": "47e5038c5f0556a38722aa6a9e49ba8f8516208e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b73fe51_7394f8df",
        "filename": "oem/ampere/event/oem_event_manager.cpp",
        "patchSetId": 9
      },
      "lineNbr": 24,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-10-25T03:12:50Z",
      "side": 1,
      "message": "This is really unclean - having redfish specific data in pldm code base. Please check if @patricks logging solution can be leveraged to achieve the same thing.",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 24,
        "endChar": 50
      },
      "revId": "47e5038c5f0556a38722aa6a9e49ba8f8516208e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f42f3969_1da05353",
        "filename": "oem/ampere/event/oem_event_manager.cpp",
        "patchSetId": 9
      },
      "lineNbr": 24,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-10-28T07:22:38Z",
      "side": 1,
      "message": "I\u0027m discussing with Patric about new proposal in the `pmci` discord group.",
      "parentUuid": "0b73fe51_7394f8df",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 24,
        "endChar": 50
      },
      "revId": "47e5038c5f0556a38722aa6a9e49ba8f8516208e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a52fa70_682ee133",
        "filename": "oem/ampere/event/oem_event_manager.cpp",
        "patchSetId": 9
      },
      "lineNbr": 24,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-10-29T05:06:43Z",
      "side": 1,
      "message": "Check below comment.",
      "parentUuid": "f42f3969_1da05353",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 24,
        "endChar": 50
      },
      "revId": "47e5038c5f0556a38722aa6a9e49ba8f8516208e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b4032f6_8dad607a",
        "filename": "oem/ampere/event/oem_event_manager.cpp",
        "patchSetId": 9
      },
      "lineNbr": 123,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-10-25T03:12:50Z",
      "side": 1,
      "message": "i am not generally rigid when it comes to OEM code , but this definitely looks like it can be improved. @patrick has the new proposal to send redfish event logs over journal and his approach is very clean.He already made good progress on that front. can you see if that can be leveraged to achieve this ?\n\nand also use lg2() ? instead of using a raw send() ?",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 123,
        "endChar": 47
      },
      "revId": "47e5038c5f0556a38722aa6a9e49ba8f8516208e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "608019c0_71de835f",
        "filename": "oem/ampere/event/oem_event_manager.cpp",
        "patchSetId": 9
      },
      "lineNbr": 123,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-10-28T07:22:38Z",
      "side": 1,
      "message": "I\u0027m discussing with Patric about this.",
      "parentUuid": "1b4032f6_8dad607a",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 123,
        "endChar": 47
      },
      "revId": "47e5038c5f0556a38722aa6a9e49ba8f8516208e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b04699cf_a589bfa8",
        "filename": "oem/ampere/event/oem_event_manager.cpp",
        "patchSetId": 9
      },
      "lineNbr": 123,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-10-29T05:06:43Z",
      "side": 1,
      "message": "Hi Manoj,\n\nI evaluated the new proposal from @Patrick. It looks clear and great. But it requires some updating in the others repos which is not available atm:\n1. As section [1] The API\n`lg2::commit()` will be added to `phosphor-logging` to create the event log uses new solutions. But the `lg2::commit is still in reviewing https://gerrit.openbmc.org/c/openbmc/phosphor-logging/+/75206\n\n2. Also as [1], \"we will add a compile option and Yocto DISTRO_FEATURE that can turn lg2::commit behavior into an OPENBMC_MESSAGE_ID record in the journal, along the same approach as the previous REDFISH_MESSAGE_ID, and corresponding rsyslog configuration and bmcweb support to use these directly.\" this feature is no implemented too. \n\nWithout this 2) to enable the committed event logs in Redfish we need enable `redfish-dbus-log` in `bmcweb` option. But if we are enable this option, the `rsyslog` event logs will be disappeared because `redfish-dump-log` is auto disabled as [2]\n\nSO\n\nFor these OEM code, I think I have to create both `Rsyslog` and `D-Bus` log while waiting for the feature in 2). What do you think about that?\nAtm, because the `lg2::commit` is not available, so I can\u0027t add the code. So Can I add todo for that?\n\n[1] https://github.com/openbmc/docs/blob/master/designs/event-logging.md#phosphor-logging\n[2] https://github.com/openbmc/bmcweb/blob/master/Redfish.md#redfishv1managersbmclogservices.",
      "parentUuid": "608019c0_71de835f",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 123,
        "endChar": 47
      },
      "revId": "47e5038c5f0556a38722aa6a9e49ba8f8516208e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcaed2ed_7b9b722d",
        "filename": "oem/ampere/event/oem_event_manager.cpp",
        "patchSetId": 9
      },
      "lineNbr": 123,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-10-29T10:48:48Z",
      "side": 1,
      "message": "\"and also use lg2() ? instead of using a raw send() ?\"\n\nIn the mean time, I updated code to use and also use lg2::error() in the latest path set instead of using a raw send().",
      "parentUuid": "b04699cf_a589bfa8",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 123,
        "endChar": 47
      },
      "revId": "47e5038c5f0556a38722aa6a9e49ba8f8516208e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4df85daa_3103bbcc",
        "filename": "oem/ampere/event/oem_event_manager.cpp",
        "patchSetId": 9
      },
      "lineNbr": 123,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-11-05T11:43:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bcaed2ed_7b9b722d",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 123,
        "endChar": 47
      },
      "revId": "47e5038c5f0556a38722aa6a9e49ba8f8516208e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "201892d5_82de2d02",
        "filename": "pldmd/pldmd.cpp",
        "patchSetId": 9
      },
      "lineNbr": 285,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-10-25T03:12:50Z",
      "side": 1,
      "message": "can we do something like how IBM did ? we basically create an OEMIBM Class, that initialises all the oem handles for us , and in this file we will only have just one entry point for the OEM code.\n\nfor reference : https://github.com/openbmc/pldm/blob/master/pldmd/oem_ibm.hpp",
      "range": {
        "startLine": 281,
        "startChar": 0,
        "endLine": 285,
        "endChar": 6
      },
      "revId": "47e5038c5f0556a38722aa6a9e49ba8f8516208e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18197e6f_ce2410db",
        "filename": "pldmd/pldmd.cpp",
        "patchSetId": 9
      },
      "lineNbr": 285,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-10-28T07:22:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "201892d5_82de2d02",
      "range": {
        "startLine": 281,
        "startChar": 0,
        "endLine": 285,
        "endChar": 6
      },
      "revId": "47e5038c5f0556a38722aa6a9e49ba8f8516208e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}