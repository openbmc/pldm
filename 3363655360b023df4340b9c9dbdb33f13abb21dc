{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ca42bf54_75d2c7c5",
        "filename": "meson.options",
        "patchSetId": 1
      },
      "lineNbr": 185,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-08-05T02:04:29Z",
      "side": 1,
      "message": "can you elaborate it even more, where does the sensor sit ? is it on the bmc side or the remote endpoint side ? \n\nare these physical sensor or the PLDM sensor (virtual) ? what does sensor update mean ?",
      "range": {
        "startLine": 184,
        "startChar": 4,
        "endLine": 185,
        "endChar": 37
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c395834a_31f22b9f",
        "filename": "meson.options",
        "patchSetId": 1
      },
      "lineNbr": 185,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-08-05T04:12:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca42bf54_75d2c7c5",
      "range": {
        "startLine": 184,
        "startChar": 4,
        "endLine": 185,
        "endChar": 37
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "def99621_993fbc43",
        "filename": "meson.options",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-08-05T02:04:29Z",
      "side": 1,
      "message": "end of the line was removed, please add it back.",
      "range": {
        "startLine": 188,
        "startChar": 0,
        "endLine": 188,
        "endChar": 1
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd990ee1_9772af7f",
        "filename": "meson.options",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-08-05T04:12:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "def99621_993fbc43",
      "range": {
        "startLine": 188,
        "startChar": 0,
        "endLine": 188,
        "endChar": 1
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "462be5b1_8e8213dc",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-08-05T02:04:29Z",
      "side": 1,
      "message": "is there a provision for not exposing a sensor as a dbus object - says for example if a certain company does not want to expose a numeric sensor over dbus purposefully - can they do that ?",
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a229bbeb_f67c7ac1",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-08-05T04:12:13Z",
      "side": 1,
      "message": "Maybe we can create build option to enable/disable create the sensor D-Bus interface with the default is enabled.",
      "parentUuid": "462be5b1_8e8213dc",
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a6e8a37_e1600a93",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-08-05T06:38:20Z",
      "side": 1,
      "message": "Hey thu - no , i am not asking that. Say there are 100 sensors, but i would only want to create dbus objects for 50 of them ? do you think thats a reasonable ask ?",
      "parentUuid": "a229bbeb_f67c7ac1",
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3163b3c_596ed98f",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-08-05T08:12:50Z",
      "side": 1,
      "message": "Oh, I see.\nI think it is so platform specific for the generic pldm code like platform-mc. To support that we need those info:\n1. How `pldmd` know which sensors will created which will not? We will need list of SensorsID\n2. When we have list of SensorsID, then which terminus will apply that list? Will we base on EID or TID. Please not that those EID or TID are settable.\n\nI and Patric had some discussion about that at\nhttps://discord.com/channels/775381525260664832/778790638563885086/1209428940976951348\nhttps://discord.com/channels/775381525260664832/778790638563885086/1209473237549846528\nand some dm after that.\nSo when we have some sensors which we don\u0027t want to show in the PLDMs it is better to define the sensors list in entity-manager instead of use pldmd to create D-Bus sensors. The EM will probe the EM configuration base on Fru data ( EEPROM Fru or PLDM Fru). The `pldmd` can create the sensors base on the probed EM.\n\nAnd we also have a part in design spec mention about that event it is not directly talk about that \nhttps://gerrit.openbmc.org/c/openbmc/docs/+/47252/34/designs/pldm-stack.md#511\nhttps://gerrit.openbmc.org/c/openbmc/docs/+/47252/34/designs/pldm-stack.md#500",
      "parentUuid": "5a6e8a37_e1600a93",
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8747d314_18497859",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-08-05T09:02:39Z",
      "side": 1,
      "message": "this sounds much better.",
      "parentUuid": "e3163b3c_596ed98f",
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ecdedde_407f2c4c",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-08-05T02:04:29Z",
      "side": 1,
      "message": "are we sure that pdr is not a null pointer when we enter here ? if not we need to check for nullptr.",
      "range": {
        "startLine": 23,
        "startChar": 13,
        "endLine": 23,
        "endChar": 27
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6fa709bf_c172cce2",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-08-05T04:12:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2ecdedde_407f2c4c",
      "range": {
        "startLine": 23,
        "startChar": 13,
        "endLine": 23,
        "endChar": 27
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adc98788_2ae9fc4b",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-08-05T02:04:29Z",
      "side": 1,
      "message": "std::regex functions are slower, please use any other alternate means to achieve this.",
      "range": {
        "startLine": 67,
        "startChar": 1,
        "endLine": 67,
        "endChar": 72
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "757a2425_cdc33dcd",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-08-05T04:12:13Z",
      "side": 1,
      "message": "Actually, we don\u0027t need this line. The try catch will cover the failure in create the sensor D-Bus object.",
      "parentUuid": "adc98788_2ae9fc4b",
      "range": {
        "startLine": 67,
        "startChar": 1,
        "endLine": 67,
        "endChar": 72
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b75c08b1_9cbda294",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-08-05T02:04:29Z",
      "side": 1,
      "message": "is c string really needed here ? this comment applies to the entire file.",
      "range": {
        "startLine": 73,
        "startChar": 67,
        "endLine": 73,
        "endChar": 72
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2dccb329_cb20a08d",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-08-05T04:12:13Z",
      "side": 1,
      "message": "The sdbusplus requires `const char*` as input for `path`. So `c_str` is required.",
      "parentUuid": "b75c08b1_9cbda294",
      "range": {
        "startLine": 73,
        "startChar": 67,
        "endLine": 73,
        "endChar": 72
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d50f8a3_b4ab0776",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-08-05T08:12:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2dccb329_cb20a08d",
      "range": {
        "startLine": 73,
        "startChar": 67,
        "endLine": 73,
        "endChar": 72
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5654392_17fe77e0",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 250,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-08-05T02:04:29Z",
      "side": 1,
      "message": "dead variable ?",
      "range": {
        "startLine": 250,
        "startChar": 4,
        "endLine": 250,
        "endChar": 18
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d82f6ce9_1dfa8f7f",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 250,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-08-05T04:12:13Z",
      "side": 1,
      "message": "Yeah, this variable is required for next patch set `sensor manager` but let me move it to next patch set.",
      "parentUuid": "d5654392_17fe77e0",
      "range": {
        "startLine": 250,
        "startChar": 4,
        "endLine": 250,
        "endChar": 18
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "163bcc2a_83829c34",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 280,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-08-05T02:04:29Z",
      "side": 1,
      "message": "how are we making sure that the exact same path is not already hosted by some other application ? or are we okay to create the dbus object ?",
      "range": {
        "startLine": 279,
        "startChar": 7,
        "endLine": 280,
        "endChar": 76
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46692352_3acdf4aa",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 280,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-08-05T04:12:13Z",
      "side": 1,
      "message": "The try catch will cover that.",
      "parentUuid": "163bcc2a_83829c34",
      "range": {
        "startLine": 279,
        "startChar": 7,
        "endLine": 280,
        "endChar": 76
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2417c198_af9eadd3",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 280,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-08-05T06:38:20Z",
      "side": 1,
      "message": "no , i dont understand how try-catch with cover that.\n\nThe use case i was asking is:\n\npldm created a path xyz/openbmc_project/sensor/temp/XY and before hosting this object what if there is another service may be the dbus-sensor daemon hosting the same patch xyz/openbmc_project/sensor/temp/XY ? \n\ndont we need to query mapper for it first before we create an object ?",
      "parentUuid": "46692352_3acdf4aa",
      "range": {
        "startLine": 279,
        "startChar": 7,
        "endLine": 280,
        "endChar": 76
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebb03628_d105c70b",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 280,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-08-05T08:12:50Z",
      "side": 1,
      "message": "I understood your question. Yeah, we can add the query mapper. The next question will be what will `pldmd` do when that sensors object path already created by others service but not `pldmd`?\nPlease note that there is the case which the duplicate sensors object path of two termini which have the same PDRs set and be configured the same terminus name. The `pldmd` need index the `terminus name` for them. But indexing the terminus name should be implemented in other patch set, I think.",
      "parentUuid": "2417c198_af9eadd3",
      "range": {
        "startLine": 279,
        "startChar": 7,
        "endLine": 280,
        "endChar": 76
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "444c0ec9_452b9cd1",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 280,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-08-05T09:02:39Z",
      "side": 1,
      "message": "yeah i think bmcweb is not really equipped to handle multiple objects hosting the same object. I think atleast as a first pass - we can stop creating the dbus object if there is already a dbus object from some one else.",
      "parentUuid": "ebb03628_d105c70b",
      "range": {
        "startLine": 279,
        "startChar": 7,
        "endLine": 280,
        "endChar": 76
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6e8d663_d8563dac",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 289,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-08-05T02:04:29Z",
      "side": 1,
      "message": "do you plan on persisting these values in file system ?",
      "range": {
        "startLine": 289,
        "startChar": 0,
        "endLine": 289,
        "endChar": 38
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69394612_6d9a28d0",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 289,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-08-05T04:12:13Z",
      "side": 1,
      "message": "The default availability state of PLDM sensors will always be `true`.\nThis value will be changed base on the return of `GetSensorReading` or no response from terminus. I don\u0027t think we need persisting this default value.",
      "parentUuid": "c6e8d663_d8563dac",
      "range": {
        "startLine": 289,
        "startChar": 0,
        "endLine": 289,
        "endChar": 38
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4df4ce5_70481725",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 289,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-08-05T06:38:20Z",
      "side": 1,
      "message": "Thats not accurate right ? the remote PLDM terminus can go down at anypoint right ? even at time we will show it as unavailable ?",
      "parentUuid": "69394612_6d9a28d0",
      "range": {
        "startLine": 289,
        "startChar": 0,
        "endLine": 289,
        "endChar": 38
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41ac89c0_a525fccc",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 289,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-08-05T08:12:50Z",
      "side": 1,
      "message": "When the remote PLDM terminus go down, the code handle the request time out will be trigger to recovery the connection to MCTP endpoint. If the endpoint still not response the `mctpd` service will remove mctp endpoint D-Bus object path. The `pldmd` will remove all sensors of terminus from monitoring list.\nSo we just need to concern about the case which the connection to terminus still good, but the GetSensorReading response `sensorOperationalState` as unavailable. Those code will be handle in sensor manager patch set https://gerrit.openbmc.org/c/openbmc/pldm/+/51489/133/platform-mc/sensor_manager.cpp#429\nIn this part when construct the sensors, we just set available state as `true`.",
      "parentUuid": "c4df4ce5_70481725",
      "range": {
        "startLine": 289,
        "startChar": 0,
        "endLine": 289,
        "endChar": 38
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca8e467b_37a581c7",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 289,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-08-05T09:02:39Z",
      "side": 1,
      "message": "we seemed to be covering all the cases, then we are good. Thanks for explaining.",
      "parentUuid": "41ac89c0_a525fccc",
      "range": {
        "startLine": 289,
        "startChar": 0,
        "endLine": 289,
        "endChar": 38
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74bb2c35_b8c0ff5c",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 447,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-08-05T02:04:29Z",
      "side": 1,
      "message": "not using it anywhere ?",
      "range": {
        "startLine": 447,
        "startChar": 4,
        "endLine": 447,
        "endChar": 18
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43814ec8_091434ba",
        "filename": "platform-mc/numeric_sensor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 447,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-08-05T04:12:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "74bb2c35_b8c0ff5c",
      "range": {
        "startLine": 447,
        "startChar": 4,
        "endLine": 447,
        "endChar": 18
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58c51863_141ba6dd",
        "filename": "platform-mc/terminus.cpp",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-08-05T02:04:29Z",
      "side": 1,
      "message": "would prefer this to be an filesystem::path object instead of a plain string.",
      "range": {
        "startLine": 85,
        "startChar": 35,
        "endLine": 85,
        "endChar": 46
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e8d9d5c_252a6607",
        "filename": "platform-mc/terminus.cpp",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-08-05T04:12:13Z",
      "side": 1,
      "message": "The constructer of `InventoryItemBoardIntf` required `const char *` so I think using `std::string` as input of `createInventoryPath` is reason able. Moreover with the input as `tName` we can call `createInventoryPath` directly in https://gerrit.openbmc.org/c/openbmc/pldm/+/73250/1/platform-mc/terminus.cpp#214",
      "parentUuid": "58c51863_141ba6dd",
      "range": {
        "startLine": 85,
        "startChar": 35,
        "endLine": 85,
        "endChar": 46
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e9e2619_4632a5a9",
        "filename": "platform-mc/terminus.cpp",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-08-05T06:38:20Z",
      "side": 1,
      "message": "okay sure, i dont have much preference as such , reason for my ask is that appending strings is much easier if modelled as fs::path object. I am okay either way",
      "parentUuid": "3e8d9d5c_252a6607",
      "range": {
        "startLine": 85,
        "startChar": 35,
        "endLine": 85,
        "endChar": 46
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4c1d025_c2637f93",
        "filename": "platform-mc/terminus.cpp",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-08-05T02:04:29Z",
      "side": 1,
      "message": "how are we sure that the remove end point is just a board ? and no something like a motherboard ?",
      "range": {
        "startLine": 95,
        "startChar": 8,
        "endLine": 96,
        "endChar": 65
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e2bff37_b983c3b3",
        "filename": "platform-mc/terminus.cpp",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-08-05T04:12:13Z",
      "side": 1,
      "message": "This is terminus inventory,\n1. maybe we can use the top most entity type in association PDRs or Top most locator PDRs to identity the terminus type.\n\n2. For the terminus which includes the terminus name, the containerID of the top most terminus should be 0x0000 `system overall`, maybe we can use `system` inventory for it.\n\nThen we can map to the item type in https://github.com/openbmc/phosphor-dbus-interfaces/tree/master/yaml/xyz/openbmc_project/Inventory/Item\n\nAt this moment, those info are not available. Do you have any idea on this?",
      "parentUuid": "b4c1d025_c2637f93",
      "range": {
        "startLine": 95,
        "startChar": 8,
        "endLine": 96,
        "endChar": 65
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9165ad46_674c4fd6",
        "filename": "platform-mc/terminus.cpp",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-08-05T04:34:56Z",
      "side": 1,
      "message": "Or we can use the inventory path from entity-manager as this patch set https://gerrit.openbmc.org/c/openbmc/pldm/+/68348",
      "parentUuid": "7e2bff37_b983c3b3",
      "range": {
        "startLine": 95,
        "startChar": 8,
        "endLine": 96,
        "endChar": 65
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26165960_af26b82d",
        "filename": "platform-mc/terminus.cpp",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-08-05T06:38:20Z",
      "side": 1,
      "message": "you mean we host Inventory.Item.System ? https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Inventory/Item/System.interface.yaml ? \n\nwith the path `/xyz/openbmc_project/inventory/Item/System` ?",
      "parentUuid": "9165ad46_674c4fd6",
      "range": {
        "startLine": 95,
        "startChar": 8,
        "endLine": 96,
        "endChar": 65
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edc8920c_6cb9ac3b",
        "filename": "platform-mc/terminus.cpp",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-08-05T08:12:50Z",
      "side": 1,
      "message": "Yes, But it will only be applied when the top most container have container ID as 0x0000 (overall system) or the top most container have the entityType as system type in DSP0249 V1.0.0.\nUsing the `META` solution is also an option.",
      "parentUuid": "26165960_af26b82d",
      "range": {
        "startLine": 95,
        "startChar": 8,
        "endLine": 96,
        "endChar": 65
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8aff7afd_d518b168",
        "filename": "platform-mc/terminus.cpp",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-08-05T09:02:39Z",
      "side": 1,
      "message": "for now we can just host the `System` and then can change based on the approach ?",
      "parentUuid": "edc8920c_6cb9ac3b",
      "range": {
        "startLine": 95,
        "startChar": 8,
        "endLine": 96,
        "endChar": 65
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fd31ede_df900d6b",
        "filename": "platform-mc/terminus.cpp",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1001526
      },
      "writtenOn": "2024-08-05T10:50:55Z",
      "side": 1,
      "message": "\u003e how are we sure that the remove end point is just a board ? and no something like a motherboard ?\n\nI think the correct inventory paths for items under the overall system should all be /xyz/openbmc_project/ivventory/system/\u003citem_type\u003e/\u003citem_name\u003e (like most inventory paths on OpenBMC do). \u003citem_type\u003e should depend on EntityType of the PDR, which can be somehow mapped 1:1 with PDI\u0027s Item list https://github.com/openbmc/phosphor-dbus-interfaces/tree/master/yaml/xyz/openbmc_project/Inventory/Item.\n\nEx: for Board (EntityID 60), the object path should be /xyz/openbmc_project/inventory/system/board/\u003citem_name\u003e, and interface should be Inventory.Item.Board.\n\nRight now, I think we should hardcode it first to /xyz/openbmc_project/inventory/system/board/\u003citem_name\u003e, and interface Inventory.Item.Board so that one terminus can be reported as one chassis instance in Redfish chassis collection (/redfish/v1/Chassis/) and have sensors reported on Redfish. Then have a mapping to deal with each entity type later.",
      "parentUuid": "8aff7afd_d518b168",
      "range": {
        "startLine": 95,
        "startChar": 8,
        "endLine": 96,
        "endChar": 65
      },
      "revId": "3363655360b023df4340b9c9dbdb33f13abb21dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}