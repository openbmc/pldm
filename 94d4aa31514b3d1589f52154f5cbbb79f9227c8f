{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "678e41a9_cda796ae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2023-11-14T05:07:03Z",
      "side": 1,
      "message": "@pavithra - can you explain how did we decide on using [may_be_not_used] vs removing the entire variable from the class itself(if it not used) ?",
      "revId": "94d4aa31514b3d1589f52154f5cbbb79f9227c8f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1debc0af_76a7f147",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2023-11-17T10:06:24Z",
      "side": 1,
      "message": "@manoj\nClang emits a -Wunused-private-field warning for non-used private static data members. And C++17 onwards we added [[maybe_unused]].\n\nGCC does not emit an error, which would also include why GCC (correctly) warns the maybe_unused attribute will be ignored by it for non-static data members (even private ones), as it will simply not diagnose non-used private data members (whereas Clang does). These behaviours are both correct, as it lies in the domain of implementation-defined behaviour.",
      "parentUuid": "678e41a9_cda796ae",
      "revId": "94d4aa31514b3d1589f52154f5cbbb79f9227c8f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ],
  "submitRequirementResults": []
}