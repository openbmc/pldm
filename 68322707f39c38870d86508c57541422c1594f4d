{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "122038d5_213635a8",
        "filename": "requester/handler.hpp",
        "patchSetId": 20
      },
      "lineNbr": 93,
      "author": {
        "id": 1001093
      },
      "writtenOn": "2022-09-07T05:23:30Z",
      "side": 1,
      "message": "This is one more MCTP association ,the MCTP socket that needs to be decoupled from this PLDM request/handler class.\nI think the right place for mentioning the mctp socket is : as part of the MCTP based PLDM TID discovery,(https://gerrit.openbmc.org/c/openbmc/pldm/+/51443/30..35/platform-mc/terminus_manager.cpp#b61) we create the map TID_to_EID map (tidPool).\nso along with the EID the associated MCTP socket FD can also be part of the TID pool map. so from the TID map we can take the respective EID and mctp sock fd and we call the mctp specific pldm request api which is inturn called from the generic pldm send request api SendRecvPldmMsg",
      "range": {
        "startLine": 93,
        "startChar": 1,
        "endLine": 93,
        "endChar": 56
      },
      "revId": "68322707f39c38870d86508c57541422c1594f4d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "142f9e3b_88827237",
        "filename": "requester/handler.hpp",
        "patchSetId": 20
      },
      "lineNbr": 93,
      "author": {
        "id": 1000957
      },
      "writtenOn": "2022-09-14T15:32:28Z",
      "side": 1,
      "message": "My idea when working on new patch set 51443 is that the generic TerminusManager::SendRecvPldmMsg() API to support different transport layer requester implementation instead of having generic requester class.\n\nIn this generic TerminusManager::SendRecvPldmMsg() API can be extended to support different transport layer by checking transportLayerTable[tid] for new SupportedTransportLayer enum and than invoke corresponding transport layer requester.\n\nFor new supportedTransportLayer(e.g. NCSI_RBT), TerminusManager class should implement necessary struct and overloaded APIs.\ne.g.\nMctpInfo vs NcsiRbtInfo\nmapTid(const MctpInfo\u0026) vs MapTid(const NcsiRbtInfo\u0026)\ntoTid(const MctpInfo\u0026) vs toTid(const NcsiRbtInfo\u0026)",
      "parentUuid": "122038d5_213635a8",
      "range": {
        "startLine": 93,
        "startChar": 1,
        "endLine": 93,
        "endChar": 56
      },
      "revId": "68322707f39c38870d86508c57541422c1594f4d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f581b601_dda2a10e",
        "filename": "requester/handler.hpp",
        "patchSetId": 20
      },
      "lineNbr": 128,
      "author": {
        "id": 1001093
      },
      "writtenOn": "2022-09-07T05:23:30Z",
      "side": 1,
      "message": "```\nMCTP EID association is needed for PLDM encode request message API() too.\nSince instanceId is part of PLDM message header and generating instanceId is managed by https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/PLDM/Requester.interface.yaml.\n```\nThis should not be the case as the instance id is unique identifier for a pldm transaction. so i think TID should be associated with the instance id rather than EID. if needed since we have introduced tid in the terminus manager i think we should update the requester interface as well.(i.e replace EID in requester class with TID and derive the EID from TID using the TIDpool map",
      "range": {
        "startLine": 128,
        "startChar": 48,
        "endLine": 128,
        "endChar": 58
      },
      "revId": "68322707f39c38870d86508c57541422c1594f4d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5decfde4_b6fff0b6",
        "filename": "requester/handler.hpp",
        "patchSetId": 20
      },
      "lineNbr": 128,
      "author": {
        "id": 1000957
      },
      "writtenOn": "2022-09-14T15:32:28Z",
      "side": 1,
      "message": "The instanceId argument here helps MCTP requester class to distinguish which registered callback should be invoked for received PLDM response message.",
      "parentUuid": "f581b601_dda2a10e",
      "range": {
        "startLine": 128,
        "startChar": 48,
        "endLine": 128,
        "endChar": 58
      },
      "revId": "68322707f39c38870d86508c57541422c1594f4d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17579f13_4ad00b8d",
        "filename": "requester/handler.hpp",
        "patchSetId": 20
      },
      "lineNbr": 299,
      "author": {
        "id": 1001093
      },
      "writtenOn": "2022-09-07T05:23:30Z",
      "side": 1,
      "message": "I think the change you have made in the review regarding the comment\n(https://gerrit.openbmc.org/c/openbmc/pldm/+/51443/30..35/platform-mc/terminus_manager.cpp#b265) should be added directly here in this handler class.\nsince only terminus manager will be able to use the common api which is added in the terminus_manager.cpp.\nIf the common sendRecvPldmMsg method is implemented in the handler.hpp file,\nthen any other process such as pldm sensor app, pldm fw update should be able to use the  tid based common sendRecvPldmMsg api. to achieve this we might need to access the TIDpool MAP to be part of PLDM requester/handler class",
      "range": {
        "startLine": 299,
        "startChar": 7,
        "endLine": 299,
        "endChar": 22
      },
      "revId": "68322707f39c38870d86508c57541422c1594f4d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6f39229_fc6e595d",
        "filename": "requester/handler.hpp",
        "patchSetId": 20
      },
      "lineNbr": 299,
      "author": {
        "id": 1000957
      },
      "writtenOn": "2022-09-14T15:32:28Z",
      "side": 1,
      "message": "I would prefer to have different requester for different transport layer.\nThe pldm sensor app, pldm fw update should use TerminusManager::SendRecvPldmMsg() if the PLDM message needs to be addressed by tid.",
      "parentUuid": "17579f13_4ad00b8d",
      "range": {
        "startLine": 299,
        "startChar": 7,
        "endLine": 299,
        "endChar": 22
      },
      "revId": "68322707f39c38870d86508c57541422c1594f4d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5515ea5a_679e3484",
        "filename": "requester/handler.hpp",
        "patchSetId": 20
      },
      "lineNbr": 299,
      "author": {
        "id": 1000957
      },
      "writtenOn": "2022-09-15T01:34:29Z",
      "side": 1,
      "message": "Another reason make me to handle multiple transport layer at terminusManager class  is that pldmd already has some feature\u0027s implementations which is coupled to EID and relies on current requester class API(e.g. HostPDRHandler, DbusToPLDMEvent, bios::Handler and fw-update).\n\nIt would be too many code changes needed at once if modify requester class directly. So keeping requester class untouched and adding new API to send PLDM msg by TID would be easier to migrate these existing implementations gradually.",
      "parentUuid": "f6f39229_fc6e595d",
      "range": {
        "startLine": 299,
        "startChar": 7,
        "endLine": 299,
        "endChar": 22
      },
      "revId": "68322707f39c38870d86508c57541422c1594f4d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7b8a62b_f902d406",
        "filename": "requester/handler.hpp",
        "patchSetId": 20
      },
      "lineNbr": 299,
      "author": {
        "id": 1001093
      },
      "writtenOn": "2022-09-23T08:35:32Z",
      "side": 1,
      "message": "yes it is true. Since we are refactoring and introducing terminus manager and dynamic discovery of the PLDM endpoints do we need to consider removing direct EID binding and move the identification logic from PLDM TID to EID and mctp sockets to relevant code?",
      "parentUuid": "5515ea5a_679e3484",
      "range": {
        "startLine": 299,
        "startChar": 7,
        "endLine": 299,
        "endChar": 22
      },
      "revId": "68322707f39c38870d86508c57541422c1594f4d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d500db57_c1f2e4c8",
        "filename": "requester/handler.hpp",
        "patchSetId": 20
      },
      "lineNbr": 299,
      "author": {
        "id": 1000957
      },
      "writtenOn": "2022-09-26T05:03:29Z",
      "side": 1,
      "message": "As my previous response, I would prefer to have two requester classes instead of refactor existing requester to support new transport layer so my opinions for refactoring would be to rename existing requester folder to /requester-mctp and create new requester folder for new transport layer(e.g. requester-ncsi). and then TerminusManager can discovery PLDM terminus by registering callback to each requester.\n\nBecause TID assignment should be done by TerminusManager, it would be easier to do the identification logic from PLDM TID to EID or PLMD TID to EBT UUID for NCSI over RBT at TerminusManager class than requester class.",
      "parentUuid": "d7b8a62b_f902d406",
      "range": {
        "startLine": 299,
        "startChar": 7,
        "endLine": 299,
        "endChar": 22
      },
      "revId": "68322707f39c38870d86508c57541422c1594f4d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}