{
  "comments": [
    {
      "key": {
        "uuid": "937f2d9a_74b8925d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-04-06T05:56:17Z",
      "side": 1,
      "message": "1.1.0",
      "range": {
        "startLine": 11,
        "startChar": 31,
        "endLine": 11,
        "endChar": 36
      },
      "revId": "6663af4cf0c30c2c54812dd135c87fe3307a16e7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b31a2de_fe5c52a9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-04-06T05:56:17Z",
      "side": 1,
      "message": "Do you plan to provide decode functions to decrypt the Descriptors data?",
      "revId": "6663af4cf0c30c2c54812dd135c87fe3307a16e7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d85cf23_0cbdbd52",
        "filename": "libpldm/firmware_update.c",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-04-06T05:56:17Z",
      "side": 1,
      "message": "le32toh, PLDM byte ordering is little endian, so decode functions will have to do le32toh.",
      "range": {
        "startLine": 53,
        "startChar": 27,
        "endLine": 53,
        "endChar": 34
      },
      "revId": "6663af4cf0c30c2c54812dd135c87fe3307a16e7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c3d7456_acb06c6e",
        "filename": "libpldm/firmware_update.c",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-04-06T05:56:17Z",
      "side": 1,
      "message": "sizeof(struct query_device_identifiers_resp), can avoid an interim variable",
      "range": {
        "startLine": 61,
        "startChar": 23,
        "endLine": 61,
        "endChar": 31
      },
      "revId": "6663af4cf0c30c2c54812dd135c87fe3307a16e7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87c8d416_643430bc",
        "filename": "libpldm/firmware_update.c",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-04-06T05:56:17Z",
      "side": 1,
      "message": "descriptor_data is yet to be initialized at this point, initialize it.",
      "range": {
        "startLine": 70,
        "startChar": 5,
        "endLine": 70,
        "endChar": 28
      },
      "revId": "6663af4cf0c30c2c54812dd135c87fe3307a16e7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "616a9ea2_dc912b4c",
        "filename": "libpldm/firmware_update.c",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-04-06T05:56:17Z",
      "side": 1,
      "message": "We can avoid a copy of the Descriptors, rather provide pointer to the Descriptor data and length in the descriptor_data field. The decode function for Descriptors can then consume it.",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 76,
        "endChar": 33
      },
      "revId": "6663af4cf0c30c2c54812dd135c87fe3307a16e7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee97c716_dd817e6d",
        "filename": "libpldm/firmware_update.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-04-06T05:56:17Z",
      "side": 1,
      "message": "This is not necessarily true, even if the out parameters are nullptr this could happen.",
      "range": {
        "startLine": 41,
        "startChar": 1,
        "endLine": 42,
        "endChar": 25
      },
      "revId": "6663af4cf0c30c2c54812dd135c87fe3307a16e7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16dbdb91_557c8ad7",
        "filename": "libpldm/tests/libpldm_firmware_update_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-04-06T06:32:34Z",
      "side": 1,
      "message": "auto",
      "range": {
        "startLine": 38,
        "startChar": 4,
        "endLine": 38,
        "endChar": 41
      },
      "revId": "6663af4cf0c30c2c54812dd135c87fe3307a16e7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "177a4dec_70ce3d3d",
        "filename": "libpldm/tests/libpldm_firmware_update_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-04-06T06:32:34Z",
      "side": 1,
      "message": "This is not validated in this test.",
      "range": {
        "startLine": 55,
        "startChar": 49,
        "endLine": 55,
        "endChar": 67
      },
      "revId": "6663af4cf0c30c2c54812dd135c87fe3307a16e7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47f4013b_28673f1e",
        "filename": "libpldm/tests/libpldm_firmware_update_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-04-06T06:32:34Z",
      "side": 1,
      "message": "We can add tests for the bad paths to keep the coverage high.",
      "revId": "6663af4cf0c30c2c54812dd135c87fe3307a16e7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}