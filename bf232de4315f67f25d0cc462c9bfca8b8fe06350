{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c55e28ce_7e044e0a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2025-01-21T07:47:22Z",
      "side": 1,
      "message": "startSensorPolling() [1] is called after `afterDiscoverTerminus`.\nThe `afterDiscoverTerminus()` [2] will call `platformManager.initTerminus` which getPDRs from the EP. The functions are coroutine function current code is already make sure that `startSensorPolling` is called after get the PRDs from terminus. \n[1] https://github.com/openbmc/pldm/blob/fb732fd99648eae137a1606a702906b2aa5b4756/platform-mc/terminus_manager.cpp#L196\n\n[2] https://github.com/openbmc/pldm/blob/fb732fd99648eae137a1606a702906b2aa5b4756/platform-mc/manager.cpp#L19",
      "revId": "bf232de4315f67f25d0cc462c9bfca8b8fe06350",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9db73caa_33d2bc18",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002134
      },
      "writtenOn": "2025-01-22T03:03:23Z",
      "side": 1,
      "message": "Under normal circumstances, the behavior is as you described.\nHowever, there\u0027s a specific scenario where this issue arises.\n\nExample:\nIf EID 20 is probed, the process begins by handling EID 20[1].\nAfter finishing the terminus initialization, it attempts to get the PDR for EID 20 via initTerminus.\nIf a GetPDR error occurs during this step[2], the terminus-\u003einitialized \u003d true flag is not set.\nAs a result, when startPolling is triggered, there are no sensors to poll[3], and EID 20\u0027s MctpInfos is removed from the queue.\n\nThen, if EID 30 is probed, the process begins handling EID 30.\nAfter initializing the terminus, it proceeds to initTerminus.\nSince [4] retrieves PDRs for all terminuses, it will attempt to reinitialize EID 20\u0027s terminus because its terminus-\u003einitialized is set to false at this point. Consequently, GetPDR is performed for EID 20 first, and then for EID 30.\nHowever, when PLDM returns to discoverMctpTerminusTask, [5] only calls startSensorPolling for addedTids, which in this case is EID 30.\n\nThis means that although EID 20 has successfully fetched the PDR this time and the PLDM tree is updated correctly, the PLDM does not initiate sensor polling for EID 20.\nThis is why I suggest moving startSensorPolling to occur right after terminus-\u003einitialized \u003d true, or alternatively, modifying the existing logic in [5] to call startSensorPolling for all terminuses instead of just addedTids.\n\nReferences:\n[1] https://github.com/openbmc/pldm/blob/fb732fd99648eae137a1606a702906b2aa5b4756/platform-mc/terminus_manager.cpp#L166\n[2] https://github.com/openbmc/pldm/blob/fb732fd99648eae137a1606a702906b2aa5b4756/platform-mc/platform_manager.cpp#L63\n[3] https://github.com/openbmc/pldm/blob/fb732fd99648eae137a1606a702906b2aa5b4756/platform-mc/sensor_manager.cpp#L47\n[4] https://github.com/openbmc/pldm/blob/fb732fd99648eae137a1606a702906b2aa5b4756/platform-mc/platform_manager.cpp#L18\n[5] \nhttps://github.com/openbmc/pldm/blob/fb732fd99648eae137a1606a702906b2aa5b4756/platform-mc/terminus_manager.cpp#L194",
      "parentUuid": "c55e28ce_7e044e0a",
      "revId": "bf232de4315f67f25d0cc462c9bfca8b8fe06350",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fb83c7a_480b3905",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2025-02-11T09:13:42Z",
      "side": 1,
      "message": "\u003e Under normal circumstances, the behavior is as you described.\n\u003e However, there\u0027s a specific scenario where this issue arises.\n\u003e \n\u003e Example:\n\u003e If EID 20 is probed, the process begins by handling EID 20[1].\n\u003e After finishing the terminus initialization, it attempts to get the PDR for EID 20 via initTerminus.\n\u003e If a GetPDR error occurs during this step[2], the terminus-\u003einitialized \u003d true flag is not set.\n\u003e As a result, when startPolling is triggered, there are no sensors to poll[3], and EID 20\u0027s MctpInfos is removed from the queue.\n\u003e \n\u003e Then, if EID 30 is probed, the process begins handling EID 30.\n\u003e After initializing the terminus, it proceeds to initTerminus.\n\u003e Since [4] retrieves PDRs for all terminuses, it will attempt to reinitialize EID 20\u0027s terminus because its terminus-\u003einitialized is set to false at this point. Consequently, GetPDR is performed for EID 20 first, and then for EID 30.\n\nWhen calling GetPDRs for EID 20 is failed at [2], `exec::task\u003cint\u003e PlatformManager::initTerminus()` will not GetPDRs of EID 20 again.\nIf the code is getting PDRs of EID20 then the code should be fixed.\n\n\u003e However, when PLDM returns to discoverMctpTerminusTask, [5] only calls startSensorPolling for addedTids, which in this case is EID 30.\n\u003e \n\u003e This means that although EID 20 has successfully fetched the PDR this time and the PLDM tree is updated correctly, the PLDM does not initiate sensor polling for EID 20.\n\u003e This is why I suggest moving startSensorPolling to occur right after terminus-\u003einitialized \u003d true, or alternatively, modifying the existing logic in [5] to call startSensorPolling for all terminuses instead of just addedTids.\n\u003e \n\u003e References:\n\u003e [1] https://github.com/openbmc/pldm/blob/fb732fd99648eae137a1606a702906b2aa5b4756/platform-mc/terminus_manager.cpp#L166\n\u003e [2] https://github.com/openbmc/pldm/blob/fb732fd99648eae137a1606a702906b2aa5b4756/platform-mc/platform_manager.cpp#L63\n\u003e [3] https://github.com/openbmc/pldm/blob/fb732fd99648eae137a1606a702906b2aa5b4756/platform-mc/sensor_manager.cpp#L47\n\u003e [4] https://github.com/openbmc/pldm/blob/fb732fd99648eae137a1606a702906b2aa5b4756/platform-mc/platform_manager.cpp#L18\n\u003e [5] \n\u003e https://github.com/openbmc/pldm/blob/fb732fd99648eae137a1606a702906b2aa5b4756/platform-mc/terminus_manager.cpp#L194",
      "parentUuid": "9db73caa_33d2bc18",
      "revId": "bf232de4315f67f25d0cc462c9bfca8b8fe06350",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c749ca94_40de19ed",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002134
      },
      "writtenOn": "2025-02-13T11:08:48Z",
      "side": 1,
      "message": "So, should we avoid getting PDR for all terminus[4] during initTerminus, or should we release the successfully initialized termini when get PDR fails?\nHowever, wouldn’t this make the terminus-\u003einitialized flag ineffective?\n\nThank you very much for your advice.",
      "parentUuid": "2fb83c7a_480b3905",
      "revId": "bf232de4315f67f25d0cc462c9bfca8b8fe06350",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c72f69f_a7eea0b4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2025-02-13T13:57:27Z",
      "side": 1,
      "message": "\u003e So, should we avoid getting PDR for all terminus[4] during initTerminus,\n\nThe `platform-manager` will discovery the new MCTP EPs in `initTerminus ` one by one. The number of termini is initialized depend on the number added termini. I don\u0027t see any problem with this behavior.\n \n\u003e or should we release the successfully initialized termini when get PDR fails?\n\nIn the current code, each terminus has one `initialized` flag and this flag will be set to true when the discovery steps for that terminus is completed.\n\n\u003e However, wouldn’t this make the terminus-\u003einitialized flag ineffective?\n\nCan you describe more about your idea in the `ineffective`?. \n\n\u003e \n\u003e Thank you very much for your advice.",
      "parentUuid": "c749ca94_40de19ed",
      "revId": "bf232de4315f67f25d0cc462c9bfca8b8fe06350",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65f516bc_ed414dc6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1002134
      },
      "writtenOn": "2025-02-19T11:19:22Z",
      "side": 1,
      "message": "\u003e The platform-manager will discovery the new MCTP EPs in initTerminus one by one. The number of termini is initialized depend on the number added termini. I don\u0027t see any problem with this behavior.\n\nMy understanding is that each time `queuedMctpInfos` receives `addedTids`, the following steps occur:\n\n1. The `initMctpTerminus` function initializes the `addedTids` into `termini`.\n2. The `initTerminus` function then initializes the PDRs of all `termini` where `terminus-\u003einitialized` is false.\n3. Finally, sensor polling is started for all `addedTids`.\n\nHowever, since `initTerminus` processes all `termini` rather than only the `addedTids`, if a Tid encounters a `get PDR failed` scenario, the corresponding `terminus` for that Tid is not deleted and will still proceed to start sensor polling for that Tid.\n\nWhen new `addedTids` are received next time, both `initMctpTerminus` and start sensor polling will only process the new `addedTids`.\nHowever, during `initTerminus`, since it targets `termini` with `terminus-\u003einitialized` set to false, it will retry `get PDR` for the previously failed Tid. Even if the `get PDR` succeeds this time, sensor polling will still not be started for that Tid.\n\nWe have observed this issue multiple times in our system\u0027s journal logs.\nThis commit aims to prevent this situation, and after applying the patch, we have confirmed that the issue no longer reproduces.\n\n\u003e Can you describe more about your idea in the `ineffective`?. \n\nRegarding the idea that the `terminus-\u003einitialized` flag is ineffective:\nIf, as you mentioned, `initTerminus` should be modified to process only the `addedTids` instead of all `termini` with `terminus-\u003einitialized` set to false, it would imply there would no longer be any `termini` with `terminus-\u003einitialized` set to false. \nThis is why I believe the `terminus-\u003einitialized` flag becomes ineffective in this scenario.\n\nIf there’s any part of my understanding that is incorrect, I would greatly appreciate your guidance.\nThank you very much for your patience and support!",
      "parentUuid": "6c72f69f_a7eea0b4",
      "revId": "bf232de4315f67f25d0cc462c9bfca8b8fe06350",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}