#include "common/utils.hpp"
#include "fw-update/package_parser.hpp"

#include <xyz/openbmc_project/Common/error.hpp>

#include <typeinfo>

#include <gmock/gmock.h>
#include <gtest/gtest.h>

using namespace pldm::fw_update;

using InternalFailure =
    sdbusplus::xyz::openbmc_project::Common::Error::InternalFailure;

void imageGenerate(std::vector<uint8_t>& image, size_t size)
{
    for (size_t i = 1; i <= size; ++i)
    {
        image.push_back(static_cast<uint8_t>(i));
    }
}

void imageInsert(std::vector<uint8_t>& fwPkgHdr, std::vector<uint8_t>& image)
{
    // Insert the image at the end of the package header
    fwPkgHdr.insert(fwPkgHdr.end(), image.begin(), image.end());
}

TEST(PackageParser, ValidPkgSingleDescriptorSingleComponent)
{
    std::vector<uint8_t> fwPkgHdr{
        0xF0, 0x18, 0x87, 0x8C, 0xCB, 0x7D, 0x49, 0x43, 0x98, 0x00, 0xA0, 0x2F,
        0x05, 0x9A, 0xCA, 0x02, 0x01, 0x8B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x19, 0x0C, 0xE5, 0x07, 0x00, 0x08, 0x00, 0x01, 0x0E,
        0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x53, 0x74, 0x72, 0x69, 0x6E,
        0x67, 0x31, 0x01, 0x2E, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0E,
        0x00, 0x00, 0x01, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x53, 0x74,
        0x72, 0x69, 0x6E, 0x67, 0x32, 0x02, 0x00, 0x10, 0x00, 0x16, 0x20, 0x23,
        0xC9, 0x3E, 0xC5, 0x41, 0x15, 0x95, 0xF4, 0x48, 0x70, 0x1D, 0x49, 0xD6,
        0x75, 0x01, 0x00, 0x0A, 0x00, 0x64, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
        0x00, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x01,
        0x0E, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x53, 0x74, 0x72, 0x69,
        0x6E, 0x67, 0x33, 0x4F, 0x96, 0xAE, 0x56};

    constexpr uintmax_t pkgSize = 166;
    constexpr uintmax_t pkgHeaderSize = 139;
    constexpr uintmax_t pkgImageSize = pkgSize - pkgHeaderSize;
    std::vector<uint8_t> compImage;
    imageGenerate(compImage, pkgImageSize);
    imageInsert(fwPkgHdr, compImage);
    constexpr std::string_view pkgVersion{"VersionString1"};
    auto parser = PackageParser(fwPkgHdr);
    EXPECT_EQ(parser.pkgVersion, pkgVersion);

    auto outfwDeviceIDRecords = parser.getFwDeviceIDRecords();
    FirmwareDeviceIDRecords fwDeviceIDRecords{
        {1,
         {0},
         "VersionString2",
         {{PLDM_FWUP_UUID,
           std::vector<uint8_t>{0x16, 0x20, 0x23, 0xC9, 0x3E, 0xC5, 0x41, 0x15,
                                0x95, 0xF4, 0x48, 0x70, 0x1D, 0x49, 0xD6,
                                0x75}}},
         {}},
    };
    EXPECT_EQ(outfwDeviceIDRecords, fwDeviceIDRecords);

    const auto& outCompImageInfos = parser.getComponentImageInfos();

    EXPECT_EQ(outCompImageInfos.size(), 1);
    const auto& outCompImageInfoTuple = outCompImageInfos[0];
    const auto& outCompImageInfo =
        std::get<pldm_package_component_image_information>(
            outCompImageInfoTuple);
    const auto& outCompImage = std::get<CompImage>(outCompImageInfoTuple);
    const auto& outCompVersion = std::get<CompVersion>(outCompImageInfoTuple);
    EXPECT_EQ(outCompImageInfo.component_classification, 10);
    EXPECT_EQ(outCompImageInfo.component_identifier, 100);
    EXPECT_EQ(outCompImageInfo.component_comparison_stamp, 0xFFFFFFFF);
    EXPECT_EQ(outCompImageInfo.component_options.value, 0);
    EXPECT_EQ(outCompImageInfo.requested_component_activation_method.value, 0);
    EXPECT_EQ(outCompImage, compImage);
    EXPECT_EQ(outCompVersion, "VersionString3");
}

TEST(PackageParser, ValidPkgMultipleDescriptorsMultipleComponents)
{
    std::vector<uint8_t> fwPkgHdr{
        0xF0, 0x18, 0x87, 0x8C, 0xCB, 0x7D, 0x49, 0x43, 0x98, 0x00, 0xA0, 0x2F,
        0x05, 0x9A, 0xCA, 0x02, 0x01, 0x46, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x19, 0x0C, 0xE5, 0x07, 0x00, 0x08, 0x00, 0x01, 0x0E,
        0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x53, 0x74, 0x72, 0x69, 0x6E,
        0x67, 0x31, 0x03, 0x45, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0E,
        0x00, 0x00, 0x03, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x53, 0x74,
        0x72, 0x69, 0x6E, 0x67, 0x32, 0x02, 0x00, 0x10, 0x00, 0x12, 0x44, 0xD2,
        0x64, 0x8D, 0x7D, 0x47, 0x18, 0xA0, 0x30, 0xFC, 0x8A, 0x56, 0x58, 0x7D,
        0x5B, 0x01, 0x00, 0x04, 0x00, 0x47, 0x16, 0x00, 0x00, 0xFF, 0xFF, 0x0B,
        0x00, 0x01, 0x07, 0x4F, 0x70, 0x65, 0x6E, 0x42, 0x4D, 0x43, 0x12, 0x34,
        0x2E, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0E, 0x00, 0x00, 0x07,
        0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x53, 0x74, 0x72, 0x69, 0x6E,
        0x67, 0x33, 0x02, 0x00, 0x10, 0x00, 0x12, 0x44, 0xD2, 0x64, 0x8D, 0x7D,
        0x47, 0x18, 0xA0, 0x30, 0xFC, 0x8A, 0x56, 0x58, 0x7D, 0x5C, 0x2E, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0E, 0x00, 0x00, 0x01, 0x56, 0x65,
        0x72, 0x73, 0x69, 0x6F, 0x6E, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x34,
        0x02, 0x00, 0x10, 0x00, 0x12, 0x44, 0xD2, 0x64, 0x8D, 0x7D, 0x47, 0x18,
        0xA0, 0x30, 0xFC, 0x8A, 0x56, 0x58, 0x7D, 0x5D, 0x03, 0x00, 0x0A, 0x00,
        0x64, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x46, 0x01,
        0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x01, 0x0E, 0x56, 0x65, 0x72, 0x73,
        0x69, 0x6F, 0x6E, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x35, 0x0A, 0x00,
        0xC8, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x00, 0x61, 0x01,
        0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x01, 0x0E, 0x56, 0x65, 0x72, 0x73,
        0x69, 0x6F, 0x6E, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x36, 0x0A, 0x00,
        0x2C, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x0C, 0x00, 0x7C, 0x01,
        0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x01, 0x0E, 0x56, 0x65, 0x72, 0x73,
        0x69, 0x6F, 0x6E, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x37, 0xE8, 0xEC,
        0xED, 0x11};

    constexpr uintmax_t pkgSize = 407;
    constexpr uintmax_t pkgHeaderSize = 326;
    constexpr uintmax_t pkgImageSize = (pkgSize - pkgHeaderSize) / 3;
    std::vector<uint8_t> compImage1, compImage2, compImage3;
    imageGenerate(compImage1, pkgImageSize);
    imageGenerate(compImage2, pkgImageSize);
    imageGenerate(compImage3, pkgImageSize);
    imageInsert(fwPkgHdr, compImage1);
    imageInsert(fwPkgHdr, compImage2);
    imageInsert(fwPkgHdr, compImage3);
    constexpr std::string_view pkgVersion{"VersionString1"};
    auto parser = PackageParser(fwPkgHdr);
    EXPECT_EQ(parser.pkgVersion, pkgVersion);

    auto outfwDeviceIDRecords = parser.getFwDeviceIDRecords();
    FirmwareDeviceIDRecords fwDeviceIDRecords{
        {1,
         {0, 1},
         "VersionString2",
         {{PLDM_FWUP_UUID,
           std::vector<uint8_t>{0x12, 0x44, 0xD2, 0x64, 0x8D, 0x7D, 0x47, 0x18,
                                0xA0, 0x30, 0xFC, 0x8A, 0x56, 0x58, 0x7D,
                                0x5B}},
          {PLDM_FWUP_IANA_ENTERPRISE_ID,
           std::vector<uint8_t>{0x47, 0x16, 0x00, 0x00}},
          {PLDM_FWUP_VENDOR_DEFINED,
           std::make_tuple("OpenBMC", std::vector<uint8_t>{0x12, 0x34})}},
         {}},
        {0,
         {0, 1, 2},
         "VersionString3",
         {{PLDM_FWUP_UUID,
           std::vector<uint8_t>{0x12, 0x44, 0xD2, 0x64, 0x8D, 0x7D, 0x47, 0x18,
                                0xA0, 0x30, 0xFC, 0x8A, 0x56, 0x58, 0x7D,
                                0x5C}}},
         {}},
        {0,
         {0},
         "VersionString4",
         {{PLDM_FWUP_UUID,
           std::vector<uint8_t>{0x12, 0x44, 0xD2, 0x64, 0x8D, 0x7D, 0x47, 0x18,
                                0xA0, 0x30, 0xFC, 0x8A, 0x56, 0x58, 0x7D,
                                0x5D}}},
         {}},
    };
    EXPECT_EQ(outfwDeviceIDRecords, fwDeviceIDRecords);

    auto outCompImageInfos = parser.getComponentImageInfos();
    EXPECT_EQ(outCompImageInfos.size(), 3);
    const auto& outCompImageInfoTuple1 = outCompImageInfos[0];
    const auto& outCompImageInfo1 =
        std::get<pldm_package_component_image_information>(
            outCompImageInfoTuple1);
    const auto& outCompImage1 = std::get<CompImage>(outCompImageInfoTuple1);
    const auto& outCompVersion1 = std::get<CompVersion>(outCompImageInfoTuple1);
    EXPECT_EQ(outCompImageInfo1.component_classification, 10);
    EXPECT_EQ(outCompImageInfo1.component_identifier, 100);
    EXPECT_EQ(outCompImageInfo1.component_comparison_stamp, 0xFFFFFFFF);
    EXPECT_EQ(outCompImageInfo1.component_options.value, 0);
    EXPECT_EQ(outCompImageInfo1.requested_component_activation_method.value, 0);
    EXPECT_EQ(outCompImage1, compImage1);
    EXPECT_EQ(outCompVersion1, "VersionString5");

    const auto& outCompImageInfoTuple2 = outCompImageInfos[1];
    const auto& outCompImageInfo2 =
        std::get<pldm_package_component_image_information>(
            outCompImageInfoTuple2);
    const auto& outCompImage2 = std::get<CompImage>(outCompImageInfoTuple2);
    const auto& outCompVersion2 = std::get<CompVersion>(outCompImageInfoTuple2);
    EXPECT_EQ(outCompImageInfo2.component_classification, 10);
    EXPECT_EQ(outCompImageInfo2.component_identifier, 200);
    EXPECT_EQ(outCompImageInfo2.component_comparison_stamp, 0xFFFFFFFF);
    EXPECT_EQ(outCompImageInfo2.component_options.value, 0);
    EXPECT_EQ(outCompImageInfo2.requested_component_activation_method.value, 1);
    EXPECT_EQ(outCompImage2, compImage2);
    EXPECT_EQ(outCompVersion2, "VersionString6");

    const auto& outCompImageInfoTuple3 = outCompImageInfos[2];
    const auto& outCompImageInfo3 =
        std::get<pldm_package_component_image_information>(
            outCompImageInfoTuple3);
    const auto& outCompImage3 = std::get<CompImage>(outCompImageInfoTuple3);
    const auto& outCompVersion3 = std::get<CompVersion>(outCompImageInfoTuple3);
    EXPECT_EQ(outCompImageInfo3.component_classification, 10);
    EXPECT_EQ(outCompImageInfo3.component_identifier, 300);
    EXPECT_EQ(outCompImageInfo3.component_comparison_stamp, 0xFFFFFFFF);
    EXPECT_EQ(outCompImageInfo3.component_options.value, 1);
    EXPECT_EQ(outCompImageInfo3.requested_component_activation_method.value,
              12);
    EXPECT_EQ(outCompImage3, compImage3);
    EXPECT_EQ(outCompVersion3, "VersionString7");
}

TEST(PackageParser, InvalidPkgHeaderInfoIncomplete)
{
    std::vector<uint8_t> fwPkgHdr{0xF0, 0x18, 0x87, 0x8C, 0xCB, 0x7D,
                                  0x49, 0x43, 0x98, 0x00, 0xA0, 0x2F,
                                  0x05, 0x9A, 0xCA, 0x02};
    EXPECT_THROW(PackageParser{fwPkgHdr}, InternalFailure);
}

TEST(PackageParser, InvalidPkgNotSupportedHeaderFormat)
{
    std::vector<uint8_t> fwPkgHdr{
        0x12, 0x44, 0xD2, 0x64, 0x8D, 0x7D, 0x47, 0x18, 0xA0, 0x30,
        0xFC, 0x8A, 0x56, 0x58, 0x7D, 0x5B, 0x02, 0x8B, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x0C, 0xE5,
        0x07, 0x00, 0x08, 0x00, 0x01, 0x0E, 0x56, 0x65, 0x72, 0x73,
        0x69, 0x6F, 0x6E, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x31};
    EXPECT_THROW(PackageParser{fwPkgHdr}, InternalFailure);
}

TEST(PackageParser, InvalidPkgBadChecksum)
{
    std::vector<uint8_t> fwPkgHdr{
        0xF0, 0x18, 0x87, 0x8C, 0xCB, 0x7D, 0x49, 0x43, 0x98, 0x00, 0xA0, 0x2F,
        0x05, 0x9A, 0xCA, 0x02, 0x01, 0x8B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x19, 0x0C, 0xE5, 0x07, 0x00, 0x08, 0x00, 0x01, 0x0E,
        0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x53, 0x74, 0x72, 0x69, 0x6E,
        0x67, 0x31, 0x01, 0x2E, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0E,
        0x00, 0x00, 0x01, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x53, 0x74,
        0x72, 0x69, 0x6E, 0x67, 0x32, 0x02, 0x00, 0x10, 0x00, 0x16, 0x20, 0x23,
        0xC9, 0x3E, 0xC5, 0x41, 0x15, 0x95, 0xF4, 0x48, 0x70, 0x1D, 0x49, 0xD6,
        0x75, 0x01, 0x00, 0x0A, 0x00, 0x64, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
        0x00, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x01,
        0x0E, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x53, 0x74, 0x72, 0x69,
        0x6E, 0x67, 0x33, 0x4F, 0x96, 0xAE, 0x57};

    constexpr uintmax_t pkgSize = 166;
    constexpr uintmax_t pkgHeaderSize = 139;
    constexpr uintmax_t pkgImageSize = pkgSize - pkgHeaderSize;
    std::vector<uint8_t> compImage;
    imageGenerate(compImage, pkgImageSize);
    imageInsert(fwPkgHdr, compImage);
    EXPECT_THROW(PackageParser{fwPkgHdr}, InternalFailure);
}
