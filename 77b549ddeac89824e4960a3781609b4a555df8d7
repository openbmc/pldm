{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0d1fb3d4_82e6b43d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2024-04-01T07:53:11Z",
      "side": 1,
      "message": "map. contains() is better only in certain chosen cases where there is no need to access the found element. since in this case, the element found is being used, it\u0027s better to go back to find().\n\nHowever, if you do not need to access the found element at all, but rather want to return a boolean existence flag, contains would make more sense.\n\nplease find the relevant info at: https://stackoverflow.com/questions/76087701/c20-contains-and-get-value-vs-find\n\n\nCan we please check all the files wherever relevant?",
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "182fc34d_4df2fab5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000845
      },
      "writtenOn": "2024-04-01T09:24:42Z",
      "side": 1,
      "message": "Appreciate if you could quote this from a more reliable source rather than the likes of \"stack overflow\". That being said, thanks for picking out this information, acknowledged. In the case where we want to use the element contained in the map using contains(), then it would do 2 searches instead of 1 in the case where we use find() which fetches the element from the map also.\n\nHere are some relevant links to C++ documentation and resources:\n\n1. cppreference.com:\n   - std::map::find: https://en.cppreference.com/w/cpp/container/map/find\n   - std::map::contains: https://en.cppreference.com/w/cpp/container/map/contains\n\n2. C++20 Standard Draft (N4861):\n   This is the latest publicly available draft of the C++20 standard. You can search for the sections related to std::map::find and std::map::contains to understand their behavior and usage.\n   - Working Draft: https://wg21.link/N4861\n\n3. ISO C++ Standards Committee Papers:\n   This paper introduces the contains member function for associative containers, including std::map, as part of the C++20 feature set. It provides rationale and examples for its usage.\n   - P0943R2: Range-based for loops with initializer: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0943r2.html",
      "parentUuid": "0d1fb3d4_82e6b43d",
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff44ffa6_30aad57e",
        "filename": "fw-update/update_manager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 152,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2024-04-01T07:53:11Z",
      "side": 1,
      "message": "Here the element is accessed right away and `.find()` is more preferrable.",
      "range": {
        "startLine": 147,
        "startChar": 7,
        "endLine": 152,
        "endChar": 67
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ef1a5ca_280caa29",
        "filename": "fw-update/update_manager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 152,
      "author": {
        "id": 1000845
      },
      "writtenOn": "2024-04-01T09:24:42Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "ff44ffa6_30aad57e",
      "range": {
        "startLine": 147,
        "startChar": 7,
        "endLine": 152,
        "endChar": 67
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43a9a2f0_839c9d8f",
        "filename": "host-bmc/host_pdr_handler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2024-04-01T07:53:11Z",
      "side": 1,
      "message": "even here same `.find` is preferred",
      "range": {
        "startLine": 143,
        "startChar": 8,
        "endLine": 145,
        "endChar": 60
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed8abb52_e625ae09",
        "filename": "host-bmc/host_pdr_handler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1000845
      },
      "writtenOn": "2024-04-01T09:24:42Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "43a9a2f0_839c9d8f",
      "range": {
        "startLine": 143,
        "startChar": 8,
        "endLine": 145,
        "endChar": 60
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cb65b43_7a68ec44",
        "filename": "libpldmresponder/base.cpp",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2024-04-01T07:53:11Z",
      "side": 1,
      "message": "here when we use `.at` exceptions should be handled explicitly.",
      "range": {
        "startLine": 162,
        "startChar": 20,
        "endLine": 162,
        "endChar": 39
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f263a93_0e2cc851",
        "filename": "libpldmresponder/base.cpp",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 1000845
      },
      "writtenOn": "2024-04-01T09:24:42Z",
      "side": 1,
      "message": ".at returns exception only if the element is not present in the map, we are already checking at line 156 that the element exists in the map.",
      "parentUuid": "1cb65b43_7a68ec44",
      "range": {
        "startLine": 162,
        "startChar": 20,
        "endLine": 162,
        "endChar": 39
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e57c7ccd_ec9a8376",
        "filename": "libpldmresponder/bios_config.cpp",
        "patchSetId": 1
      },
      "lineNbr": 560,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2024-04-01T07:53:11Z",
      "side": 1,
      "message": "same as above file comment",
      "range": {
        "startLine": 560,
        "startChar": 24,
        "endLine": 560,
        "endChar": 33
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ecf0d251_d0307a4d",
        "filename": "libpldmresponder/bios_config.cpp",
        "patchSetId": 1
      },
      "lineNbr": 560,
      "author": {
        "id": 1000845
      },
      "writtenOn": "2024-04-01T09:24:42Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "e57c7ccd_ec9a8376",
      "range": {
        "startLine": 560,
        "startChar": 24,
        "endLine": 560,
        "endChar": 33
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ada9d446_3afea7a9",
        "filename": "libpldmresponder/bios_config.cpp",
        "patchSetId": 1
      },
      "lineNbr": 935,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2024-04-01T07:53:11Z",
      "side": 1,
      "message": "`.find` is better here as we use the value immediately",
      "range": {
        "startLine": 935,
        "startChar": 44,
        "endLine": 935,
        "endChar": 46
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a0caed7_7d02255b",
        "filename": "libpldmresponder/bios_config.cpp",
        "patchSetId": 1
      },
      "lineNbr": 935,
      "author": {
        "id": 1000845
      },
      "writtenOn": "2024-04-01T09:24:42Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "ada9d446_3afea7a9",
      "range": {
        "startLine": 935,
        "startChar": 44,
        "endLine": 935,
        "endChar": 46
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c3e839a_5b93a4c3",
        "filename": "libpldmresponder/bios_config.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1125,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2024-04-01T07:53:11Z",
      "side": 1,
      "message": "same as above file comment - []operator",
      "range": {
        "startLine": 1125,
        "startChar": 40,
        "endLine": 1125,
        "endChar": 59
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c55b284a_b9069e7c",
        "filename": "libpldmresponder/bios_config.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1125,
      "author": {
        "id": 1000845
      },
      "writtenOn": "2024-04-01T09:24:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c3e839a_5b93a4c3",
      "range": {
        "startLine": 1125,
        "startChar": 40,
        "endLine": 1125,
        "endChar": 59
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b154476_867d2dfc",
        "filename": "libpldmresponder/bios_config.hpp",
        "patchSetId": 1
      },
      "lineNbr": 232,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2024-04-01T07:53:11Z",
      "side": 1,
      "message": "when we use a [] - operator[] value-initializes a new value for the corresponding key if no value exists there. `.find` would be better?\n\nhttps://stackoverflow.com/questions/10821405/difference-between-map-and-map-at-in-c",
      "range": {
        "startLine": 232,
        "startChar": 58,
        "endLine": 232,
        "endChar": 80
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ffcb7810_9a79b13b",
        "filename": "libpldmresponder/bios_config.hpp",
        "patchSetId": 1
      },
      "lineNbr": 232,
      "author": {
        "id": 1000845
      },
      "writtenOn": "2024-04-01T09:24:42Z",
      "side": 1,
      "message": "we are already checking if the key is contained in the map. Although, as agreed upon, find() is better here as we using the value.",
      "parentUuid": "3b154476_867d2dfc",
      "range": {
        "startLine": 232,
        "startChar": 58,
        "endLine": 232,
        "endChar": 80
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3b22d9f_0d725077",
        "filename": "libpldmresponder/bios_enum_attribute.cpp",
        "patchSetId": 1
      },
      "lineNbr": 259,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2024-04-01T07:53:11Z",
      "side": 1,
      "message": "`find` seems better?",
      "range": {
        "startLine": 251,
        "startChar": 1,
        "endLine": 259,
        "endChar": 39
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "333586d8_b2c1a9ea",
        "filename": "libpldmresponder/bios_enum_attribute.cpp",
        "patchSetId": 1
      },
      "lineNbr": 259,
      "author": {
        "id": 1000845
      },
      "writtenOn": "2024-04-01T09:24:42Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "a3b22d9f_0d725077",
      "range": {
        "startLine": 251,
        "startChar": 1,
        "endLine": 259,
        "endChar": 39
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8fb16aa_bcf2899a",
        "filename": "libpldmresponder/bios_string_attribute.cpp",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2024-04-01T07:53:11Z",
      "side": 1,
      "message": "handle exception explicitly as `.at` is not exception-safe.",
      "range": {
        "startLine": 32,
        "startChar": 60,
        "endLine": 32,
        "endChar": 62
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a9e1dd7_15fde371",
        "filename": "libpldmresponder/bios_string_attribute.cpp",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1000845
      },
      "writtenOn": "2024-04-01T09:24:42Z",
      "side": 1,
      "message": "check other replies",
      "parentUuid": "c8fb16aa_bcf2899a",
      "range": {
        "startLine": 32,
        "startChar": 60,
        "endLine": 32,
        "endChar": 62
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b68bdf61_7c70a1ff",
        "filename": "libpldmresponder/fru_parser.cpp",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2024-04-01T07:53:11Z",
      "side": 1,
      "message": "same here",
      "range": {
        "startLine": 160,
        "startChar": 16,
        "endLine": 160,
        "endChar": 40
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "756f90f6_0cdc4b58",
        "filename": "libpldmresponder/fru_parser.cpp",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1000845
      },
      "writtenOn": "2024-04-01T09:24:42Z",
      "side": 1,
      "message": "could you elaborate the \"same here\" you are referring to?",
      "parentUuid": "b68bdf61_7c70a1ff",
      "range": {
        "startLine": 160,
        "startChar": 16,
        "endLine": 160,
        "endChar": 40
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "533fb960_35cf2e16",
        "filename": "libpldmresponder/fru_parser.cpp",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2024-04-01T09:35:56Z",
      "side": 1,
      "message": "usage of the [] operator as mentioned here - https://gerrit.openbmc.org/c/openbmc/pldm/+/70368/1..2/libpldmresponder/bios_config.hpp#b232\nand since the element is used `find` is preferred?",
      "parentUuid": "756f90f6_0cdc4b58",
      "range": {
        "startLine": 160,
        "startChar": 16,
        "endLine": 160,
        "endChar": 40
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "41946625_b8349f80",
        "filename": "libpldmresponder/platform.cpp",
        "patchSetId": 1
      },
      "lineNbr": 484,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2024-04-01T07:53:11Z",
      "side": 1,
      "message": "here `contains` is preferred as it\u0027s just the boolean existence check",
      "range": {
        "startLine": 484,
        "startChar": 28,
        "endLine": 484,
        "endChar": 36
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40b447cc_d42c9a7f",
        "filename": "pldmtool/pldm_fru_cmd.cpp",
        "patchSetId": 1
      },
      "lineNbr": 155,
      "author": {
        "id": 1000938
      },
      "writtenOn": "2024-04-01T07:53:11Z",
      "side": 1,
      "message": "here `contains` is preferred",
      "range": {
        "startLine": 155,
        "startChar": 41,
        "endLine": 155,
        "endChar": 49
      },
      "revId": "77b549ddeac89824e4960a3781609b4a555df8d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}