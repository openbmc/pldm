{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "63c9aa1b_6e4c7efd",
        "filename": "platform-mc/terminus_manager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 368,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-11-01T09:54:18Z",
      "side": 1,
      "message": "The terminus supports many PLDM command types for each type it will support many commands.\nI don\u0027t think return Error and un-map the terminus at this step is reasonable.\nWhy the PLDM command is failed? What is the reason? If the connection is not stable or the terminus is not stable then we should fix the terminus but not repeat retry to discovery the terminus.",
      "revId": "9b702cccc06ff7aae78154fa3007aa2b588dab5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58dc1f05_017f4e6b",
        "filename": "platform-mc/terminus_manager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 368,
      "author": {
        "id": 1002134
      },
      "writtenOn": "2024-11-01T10:19:39Z",
      "side": 1,
      "message": "The \"get PLDM command failed\" issue occurs during a request timeout.\nCould it be that with an overload of requests, the PLDM device responds within the timeout, but PLDM cannot process it in time, marking the request as failed?\n\nWhen a get PLDM command fails, it results in an incorrect initialization of the PLDM device, and if the failed command is for PDR, this can cause the PLDM device to disappear with no further chance for sensor polling.\nShould the request timeout duration be extended in this case?\n\nYour advice would be appreciated. Thank you.",
      "parentUuid": "63c9aa1b_6e4c7efd",
      "revId": "9b702cccc06ff7aae78154fa3007aa2b588dab5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1cd3f0a6_ee7b81ee",
        "filename": "platform-mc/terminus_manager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 368,
      "author": {
        "id": 1002134
      },
      "writtenOn": "2024-11-01T11:42:53Z",
      "side": 1,
      "message": "Mark as resolved",
      "parentUuid": "58dc1f05_017f4e6b",
      "revId": "9b702cccc06ff7aae78154fa3007aa2b588dab5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a5a16eb_33999585",
        "filename": "platform-mc/terminus_manager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 368,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-11-01T12:02:20Z",
      "side": 1,
      "message": "The pldm support the option to set the timeout in access terminus and also number of retry when there is failure. This command is sent in the discovery flow, no sensor polling, no event handling at this moment. Then why it is time out?",
      "parentUuid": "1cd3f0a6_ee7b81ee",
      "revId": "9b702cccc06ff7aae78154fa3007aa2b588dab5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "308b42e7_e7579ae1",
        "filename": "platform-mc/terminus_manager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 368,
      "author": {
        "id": 1002134
      },
      "writtenOn": "2024-11-06T01:51:33Z",
      "side": 1,
      "message": "Are you referring to the instance-id-expiration-interval (request timeout option) and number-of-request-retries (retry attempt count) in the meson.options?\nCould modifying the instance-id-expiration-interval potentially lead to a shortage due to slow release of instance IDs?\nWhile the number-of-request-retries is currently set to 2, I haven\u0027t observed a retry mechanism in the current PLDM execution logs. Is there a way to enable immediate retry on encountering a PLDM error?\n\nDo you think modifying these two parameters would be beneficial, or might the impact be too broad? Could we configure these parameters specifically for our project layer instead?\n\nIn our system, during startup, the BMC interfaces with approximately 16 PLDM devices, requiring simultaneous communication and initialization. Each device has nearly a hundred sensors and services like phosphor-pid-control that also need PLDM information. From my understanding, processRxMsg handles incoming requests and responses one by one. Is it possible that the transmission is completed much sooner, but due to processRxMsg taking too long, it fails to process the request in time?\n\nThank you very much!",
      "parentUuid": "2a5a16eb_33999585",
      "revId": "9b702cccc06ff7aae78154fa3007aa2b588dab5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94cb69f3_8007bee0",
        "filename": "platform-mc/terminus_manager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 368,
      "author": {
        "id": 1000945
      },
      "writtenOn": "2024-11-06T02:08:15Z",
      "side": 1,
      "message": "\u003e Are you referring to the instance-id-expiration-interval (request timeout option) and number-of-request-retries (retry attempt count) in the meson.options?\n\u003e Could modifying the instance-id-expiration-interval potentially lead to a shortage due to slow release of instance IDs?\n\u003e While the number-of-request-retries is currently set to 2, I haven\u0027t observed a retry mechanism in the current PLDM execution logs. Is there a way to enable immediate retry on encountering a PLDM error?\n\nDid you try those option yet?\n\n\u003e \n\u003e Do you think modifying these two parameters would be beneficial, or might the impact be too broad? Could we configure these parameters specifically for our project layer instead?\n\u003e \n\u003e In our system, during startup, the BMC interfaces with approximately 16 PLDM devices, requiring simultaneous communication and initialization. Each device has nearly a hundred sensors and services like phosphor-pid-control that also need PLDM information. From my understanding, processRxMsg handles incoming requests and responses one by one. Is it possible that the transmission is completed much sooner, but due to processRxMsg taking too long, it fails to process the request in time?\n\nWhat is the error you see in the failure case?\nIf the failure happen in the discovery phase because there are too much devices. I think it is better to order the binding devices one by one instead of binding all at one.\nMoreover, if the `processRxMsg handles incoming requests and responses` then I can\u0027t handle the `pldmd` communication when `pldmd` in handling sensor polling for all of 16 devices.\n\nFailure in `getting PLDM commands supports` of one PLDM type does not mean the device not good to unmap it and rediscovery it.\n\n\u003e \n\u003e Thank you very much!",
      "parentUuid": "308b42e7_e7579ae1",
      "revId": "9b702cccc06ff7aae78154fa3007aa2b588dab5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "570480a7_eb5e48cf",
        "filename": "platform-mc/terminus_manager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 368,
      "author": {
        "id": 1002134
      },
      "writtenOn": "2024-11-08T10:22:56Z",
      "side": 1,
      "message": "\u003e Did you try those option yet?\n\nApologies, but I have not tried modifying the parameters in meson.option yet. Our project requires the OpenBMC build to stay fully aligned with upstream, so I don’t think we can change these options freely.\n\nAlso, I am still unclear on the role of number-of-request-retries in the PLDM code and which part handles the retry. From the logs, it seems that failed requests only attempt once and then fail.\n\n\n\u003e What is the error you see in the failure case?\n\u003e If the failure happen in the discovery phase because there are too much devices. I think it is better to order the binding devices one by one instead of binding all at one.\n\nDuring the discovery process, there are messages such as:\nInstance ID expiry for EID \u002740\u0027 using InstanceID ...\nFailed to Get PLDM Commands for terminus 40, error 4\n\nIf this step fails, it might cause the getPDRs process to assume the get PDR command is unsupported, leading to the PLDM device not initializing properly.\n\n\u003e Moreover, if the `processRxMsg handles incoming requests and responses` then I can\u0027t handle the `pldmd` communication when `pldmd` in handling sensor polling for all of 16 devices.\n\nCould you explain if there is a way to configure or achieve binding devices one by one instead of binding all at once? Is your point that, in our environment, the initialization of so many PLDM devices could indeed overwhelm the PLDM response handling? \n\n\u003e Failure in `getting PLDM commands supports` of one PLDM type does not mean the device not good to unmap it and rediscovery it.\n\nI’m also not clear on whether this means the device should not be unmapped even if it fails. My goal is to ensure that if a timeout occurs during the initialization phase, the PLDM device still has a chance to retry initialization.\n\nThank you very much for your advice.",
      "parentUuid": "94cb69f3_8007bee0",
      "revId": "9b702cccc06ff7aae78154fa3007aa2b588dab5e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}