{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d4b948d8_1ac37d1e",
        "filename": "common/instance_id.hpp",
        "patchSetId": 11
      },
      "lineNbr": 60,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T11:13:39Z",
      "side": 1,
      "message": "expected\u003cint-type, int-type\u003e feels very unnatural to me.  @andrew@codeconstruct.com.au - opinions?",
      "range": {
        "startLine": 60,
        "startChar": 4,
        "endLine": 60,
        "endChar": 31
      },
      "revId": "a9751b044e2ee307c440433945223666b7af6096",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "507a3539_da3b5da1",
        "filename": "common/instance_id.hpp",
        "patchSetId": 11
      },
      "lineNbr": 60,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-05-15T23:59:17Z",
      "side": 1,
      "message": "Yeaah, it doesn\u0027t seem great... having the error type inherit from `std::exception` would be better to eliminate subsequent type confusion.",
      "parentUuid": "d4b948d8_1ac37d1e",
      "range": {
        "startLine": 60,
        "startChar": 4,
        "endLine": 60,
        "endChar": 31
      },
      "revId": "a9751b044e2ee307c440433945223666b7af6096",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3136a238_4c9083ab",
        "filename": "common/instance_id.hpp",
        "patchSetId": 11
      },
      "lineNbr": 60,
      "author": {
        "id": 1002134
      },
      "writtenOn": "2025-05-19T10:39:17Z",
      "side": 1,
      "message": "I\u0027m considering updating `InstanceIdDb::next()` to return `std::expected\u003cuint8_t, InstanceIdError\u003e`, where `InstanceIdError` would be a class derived from `std::exception` that contains both an error code and a message as members.\nWould this API change address the concerns about error type clarity?",
      "parentUuid": "507a3539_da3b5da1",
      "range": {
        "startLine": 60,
        "startChar": 4,
        "endLine": 60,
        "endChar": 31
      },
      "revId": "a9751b044e2ee307c440433945223666b7af6096",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "517a92b4_c3fecbfb",
        "filename": "fw-update/device_updater.cpp",
        "patchSetId": 11
      },
      "lineNbr": 37,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T11:13:39Z",
      "side": 1,
      "message": "We still have a blob of almost 10 lines of code that have to be duplicated though?",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 37,
        "endChar": 47
      },
      "revId": "a9751b044e2ee307c440433945223666b7af6096",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b21a2d4_690f4c25",
        "filename": "fw-update/device_updater.cpp",
        "patchSetId": 11
      },
      "lineNbr": 37,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2025-05-15T23:59:17Z",
      "side": 1,
      "message": "I\u0027m not convinced this 10-line blob is even the behaviour we want - the caller can\u0027t know that the update process failed to start. Should we propagate the failure?",
      "parentUuid": "517a92b4_c3fecbfb",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 37,
        "endChar": 47
      },
      "revId": "a9751b044e2ee307c440433945223666b7af6096",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02066484_c43c162e",
        "filename": "fw-update/device_updater.cpp",
        "patchSetId": 11
      },
      "lineNbr": 37,
      "author": {
        "id": 1002134
      },
      "writtenOn": "2025-05-19T10:39:17Z",
      "side": 1,
      "message": "Would it be preferable to keep `InstanceIdDb::next()` returning an ID on success and throwing an exception on failure, but avoid catching exceptions at every call siteâ€”instead only handling them at the appropriate top-level logic?\nWould this pattern for error propagation better match your expectations?",
      "parentUuid": "5b21a2d4_690f4c25",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 37,
        "endChar": 47
      },
      "revId": "a9751b044e2ee307c440433945223666b7af6096",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8d822d6_41b49a56",
        "filename": "fw-update/inventory_manager.cpp",
        "patchSetId": 11
      },
      "lineNbr": 50,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-05-15T11:13:39Z",
      "side": 1,
      "message": "Uh... what are we throwing?",
      "revId": "a9751b044e2ee307c440433945223666b7af6096",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}